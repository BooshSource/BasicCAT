Private similarityResult As KeyValueStore
similarityResult.Initialize(File.Combine(projectPath,"TM"),"similarity.db")
Sub getMatchList(source As String) As ResumableSub
	Dim matchList As List
	matchList.Initialize

	For i=0 To 1
		If i=0 Then
			Dim kvs As KeyValueStore
			kvs=translationMemory
		Else
			Dim kvs As KeyValueStore
			kvs=externalTranslationMemory
		End If
		For Each key As String In kvs.ListKeys
			Sleep(0)
			If basicCompare(source,key)=False Then
				Continue
			End If
			Dim pairList As List
			pairList.Initialize
			pairList.Add(source)
			pairList.Add(key) ' two sourcelanguage sentences
			Dim json As JSONGenerator
			json.Initialize2(pairList)
			Dim similarity As Double
			If similarityResult.ContainsKey(json.ToString) Then
				similarity=similarityResult.Get(json.ToString)

			Else
				wait for (getSimilarityFuzzyWuzzy(source,key)) Complete (Result As Double)
				similarity=Result
				similarityResult.Put(json.ToString,similarity)
			End If
			If similarity>0.5 Then
				Dim tmPairList As List
				tmPairList.Initialize
				tmPairList.Add(similarity)
				tmPairList.Add(key)
				
				If i=0 Then
					tmPairList.Add(kvs.Get(key))
					tmPairList.Add("")
				Else
					Dim targetList As List
					targetList=kvs.Get(key)
					tmPairList.Add(targetList.Get(0))
					tmPairList.Add(targetList.Get(1))
				End If
				Log(tmPairList)
				matchList.Add(tmPairList)
			End If
		Next
    Next
	
	Return subtractedAndSortMatchList(matchList)
End Sub
