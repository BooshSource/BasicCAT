AppType=JavaFX
Build1=Default,b4j.example
File1=.gitignore
File10=lowerRight.bjl
File11=main.bjl
File12=menuText.txt
File13=mtparamfiller.bjl
File14=mtSetting.bjl
File15=oneterm.bjl
File16=preferences.bjl
File17=pretranslate.bjl
File18=preview.bjl
File19=progress.bjl
File2=appearance.bjl
File20=projectSetting.bjl
File21=right.bjl
File22=searchandreplace.bjl
File23=searchTableView.bjl
File24=segment.bjl
File25=segmentation_en.conf
File26=segmentation_en_exception.conf
File27=segmentation_en_idml.conf
File28=segmentation_zh.conf
File29=segmentation_zh_exception.conf
File3=autocomplete.bjl
File30=settingLanguagecheck.bjl
File31=settingVersionControl.bjl
File32=statistics.bjl
File33=supportedFiles.txt
File34=tableview.bjl
File35=tabpane.bjl
File36=term.bjl
File37=TermManager.bjl
File38=tmList.bjl
File39=TMManager.bjl
File4=checkList.bjl
File40=TMsegment.bjl
File41=tmSetting.bjl
File42=upperRight.bjl
File43=viewSegment.bjl
File44=wordLookupSetting.bjl
File5=editor.bjl
File6=generalSetting.bjl
File7=inputbox.bjl
File8=leftProject.bjl
File9=Log.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library10=jb4xencryption
Library11=jhttp
Library12=jshell
Library13=jreflection
Library14=encryption
Library15=byteconverter
Library16=jstringutils
Library17=jawtrobot
Library18=jxmlsax
Library19=xmlbuilder
Library2=jfx
Library20=jhttputils2
Library3=javaobject
Library4=archiver
Library5=json
Library6=apachestringutilsb4j
Library7=jxui
Library8=jsql
Library9=jrandomaccessfile
Module1=FileChooserUtils
Module10=preTranslateDialog
Module11=ITP
Module12=MT
Module13=MTParamsFiller
Module14=Preferences
Module15=idmlFilter
Module16=Utils
Module17=statistics
Module18=coordinate
Module19=Map2Xml
Module2=Project
Module20=Xml2Map
Module21=git
Module22=LanguageTool
Module23=searchAndReplaceDialog
Module24=Previewer
Module25=TextFlow
Module26=editDistance
Module27=progressDialog
Module28=InputBox
Module29=TMManager
Module3=segmentation
Module30=viewSegment
Module31=TermManager
Module4=CustomListView
Module5=txtFilter
Module6=TM
Module7=Term
Module8=KeyValueStore
Module9=ProjectSettings
NumberOfFiles=44
NumberOfLibraries=20
NumberOfModules=31
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region


#AdditionalJar: sqlite-jdbc-3.23.1
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: fuzzywuzzy-1.1.10

'-------- for jgit
#AdditionalJar: org.eclipse.jgit-5.1.1.201809181055-r
#AdditionalJar: jsch-0.1.54
#AdditionalJar: jzlib-1.1.1
#AdditionalJar: JavaEWAH-1.1.6
#AdditionalJar: slf4j-api-1.7.2
#AdditionalJar: slf4j-simple-1.7.25

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private mainSplitPane As SplitPane
	Private upperRightSplitPane As SplitPane
	Private rightSplitPane As SplitPane
	Public editorLV As CustomListView
	Public projectTreeTableView As TreeTableView
	Public currentProject As Project
	Private lowerRightSplitPane As SplitPane
	Public TabPane1 As TabPane
	Public LogWebView As WebView
	Public tmTableView As TableView
	Public searchTableView As TableView
	Private addTermButton As Button
	Public sourceTermTextField As TextField
	Public targetTermTextField1 As TextField
	Public termLV As ListView
	Public calculatedHeight As Map
	Public preferencesMap As Map
	Private contextWebView As WebView
	Private segmentSearchToggleButton As ToggleButton
	Private TMViewToggleButton As ToggleButton
	Private viewTMTextArea As TextArea
	Private segmentLabel As Label
	Private MenuBar1 As MenuBar
	Public pre As Previewer
    Private autosaveTimer As Timer
	
	Private operationLabel As Label
	Private checkLV As CustomListView
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	init
	Log(fx.Screens)
	Log(GetSystemProperty("os.name","windows"))
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	adjustDividerPositions
	calculatedHeight.Clear

	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	closeServer
End Sub

Sub init
	autosaveTimer.Initialize("autosaveTimer",60000)
	autosaveTimer.Enabled=False
	mainSplitPane.LoadLayout("leftProject")
	mainSplitPane.LoadLayout("right")

	rightSplitPane.LoadLayout("upperRight")
	rightSplitPane.LoadLayout("lowerRight")
	
	upperRightSplitPane.LoadLayout("editor")
	upperRightSplitPane.LoadLayout("term")
	
	Dim jo As JavaObject
	jo=upperRightSplitPane
	addPositionChangedEvent(jo.RunMethodJO("getDividers",Null).RunMethodJO("get",Array(0)),"dividerPosition")
	
	lowerRightSplitPane.LoadLayout("Log")
	lowerRightSplitPane.LoadLayout("tabpane")
	TabPane1.LoadLayout("tableview", "TM Match")
	TabPane1.LoadLayout("searchTableView", "Segment Search")
	TabPane1.LoadLayout("checkList", "LanguageCheck")
	calculatedHeight.Initialize
	adjustDividerPositions
	preferencesMap.Initialize

	If File.Exists(File.DirApp,"preferences.conf") Then
		Dim json As JSONParser
		json.Initialize(File.ReadString(File.DirApp,"preferences.conf"))
		preferencesMap=json.NextObject
	End If
	tmTableView.SetColumnWidth(1,200)
	tmTableView.SetColumnWidth(2,200)
	Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
End Sub

Sub closeServer
	If ITP.sh.IsInitialized Then
		ITP.sh.KillProcess
	End If
End Sub

Sub adjustDividerPositions
	mainSplitPane.DividerPositions=Array As Double(0.2)
	rightSplitPane.DividerPositions=Array As Double(0.8)
	
	lowerRightSplitPane.DividerPositions=Array As Double(0.2)
	upperRightSplitPane.DividerPositions=Array As Double(0.8)
End Sub

Public Sub addProjectTreeTableItem
	For Each item As String In Array As String("Project Files","Translation Memory","Terminology","Statistics","Preview")
		Dim lbl As Label
		lbl.Initialize("lbl")
		lbl.Text=item
		If item="Project Files" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Add File","addFileMi")
			cm.MenuItems.Add(mi)
			lbl.ContextMenu=cm
		End If
		Dim tti As TreeTableItem
		tti.Initialize("tti",Array As Object(lbl))
		
		projectTreeTableView.Root.Children.Add(tti)
	Next
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Select mi.Text
		Case "_Open"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("project files",Array As String("*.json"))
			Dim path As String
			path=fc.ShowOpen(MainForm)
			If path="" Then
				Return
			End If
			currentProject.Initialize
			currentProject.open(path)
			autosaveTimer.Enabled=True
			MainForm.Title=getProjectname(path)
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
			Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
		Case "en to zh Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
			    Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("en","zh")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Case "zh to en Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("zh","en")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Case "_Save"
			If currentProject.IsInitialized=False Then
				Return
			End If
			autosaveTimer.Enabled=True
			If currentProject.path="" Then
				Dim fc As FileChooser
				fc.Initialize
				fc.Title="Please enter the folder name to store the project."
				Dim path As String
				path=fc.ShowSave(MainForm)
				If path="" Then
					Return
				End If
				If File.Exists(path,"") Then
					fx.Msgbox(MainForm,"There has already been a file.","")
					Return
				End If
				currentProject.path=path
				currentProject.save
				MainForm.Title=path
				Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
			Else
				currentProject.save
			End If
		Case "_Generate target files"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateTargetFiles
		Case "_Close"
			Log("closing")
			closeProject
		Case "Go to the next untranslated segment"
			For i=currentProject.lastEntry To editorLV.Size-1
				Dim p As Pane
				p=editorLV.GetPanel(i)
				If Utils.getTextFromPane(1,p)="" Then
					editorLV.JumpToItem(i)
					Return
				End If
			Next
		Case "Fill with the first matched TM"
			fillWithTM
		Case "Search and Replace"
			Dim sap As searchAndReplaceDialog
			sap.Initialize
			sap.show
		Case "Project Settings"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ps As ProjectSettings
			ps.Initialize
			Dim resultList As List
			resultList=ps.ShowAndWait
			If resultList.Get(0)<>"canceled" Then
				currentProject.saveSettings(resultList.Get(1))
			End If
			
		Case "Pre-translate"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			If editorLV.Size=0 Then
				fx.Msgbox(MainForm,"Please open a file first.","")
				Return
			End If
			Dim ptDialog As preTranslateDialog
			ptDialog.Initialize
			currentProject.preTranslate(ptDialog.ShowAndWait)
		Case "_Exit"
			'Dim currentProject as Project
			If currentProject.IsInitialized Then
				currentProject.projectTM.close
				
			End If
			closeServer

			ExitApplication
		Case "Preferences"
			Dim pref As Preferences
			pref.Initialize
			pref.ShowAndWait
		Case "_About"
			fx.Msgbox(MainForm,"BasicCAT 1.0"&CRLF&"@xulihang 2018","BasicCAT")
	End Select
End Sub

Sub addFileMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Dim fc As FileChooser
	fc.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	Dim descriptionList,filterList As List
	descriptionList.Initialize
	filterList.Initialize
	For Each filetype As String In supportedFiles
		descriptionList.Add(Regex.Split("	",filetype)(0))
		filterList.add(Regex.Split("	",filetype)(1))
	Next
	FileChooserUtils.AddExtensionFilters4(fc,descriptionList,filterList,False,"",True)
	Dim path As String
	path=fc.ShowOpen(MainForm)
	Log(path)
	Log(getFilename(path))
	If path="" Then
		Return
	else if File.Exists(File.Combine(currentProject.path,"source"),getFilename(path)) Then
		fx.Msgbox(MainForm,"A file with the same name already exists.","")
		Return
	End If
	currentProject.addFile(path)
	Log(path)
End Sub

Sub projectTreeTableView_SelectedItemChanged (SelectedItem As TreeTableItem)
	If SelectedItem<>Null And SelectedItem.IsInitialized Then
		Dim lbl As Label
		lbl=SelectedItem.GetValue(0)
		Log(lbl.Text)
		Select lbl.Text
			
			Case "Project Files"

			Case "Translation Memory"
                projectTreeTableView.ClearSelection
				Dim tmm As TMManager
				tmm.Initialize
				tmm.ShowAndWait
			Case "Terminology"
				projectTreeTableView.ClearSelection
				Dim termm As TermManager
				termm.Initialize
				termm.ShowAndWait
			Case "Preview"
				projectTreeTableView.ClearSelection
				If pre.IsInitialized=False Then
					pre.Initialize
				End If
				If pre.isShowing=False Then
					pre.Show
				End If
			Case "Statistics"
				projectTreeTableView.ClearSelection
				Dim st As statistics
				st.Initialize
				st.Show
		End Select
	End If
End Sub

Public Sub getFilename(path As String) As String
	Dim filename As String
	
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		filename=path.SubString2(path.LastIndexOf("\")+1,path.Length)
	Else
		filename=path.SubString2(path.LastIndexOf("/")+1,path.Length)
	End If
	Log(filename)
	Return filename
End Sub

Public Sub getProjectname(path As String) As String
	Dim Projectname As String
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		Projectname=path.SubString2(path.LastIndexOf("\"),path.Length)
		Projectname=path.Replace(Projectname,"")
	Else
		Projectname=path.SubString2(path.LastIndexOf("/"),path.Length)
		Projectname=path.Replace(Projectname,"")
		Log(LastException)
	End If
	Log(Projectname)
	Return Projectname
End Sub

Sub ListViewParent_Resize

	Dim clv As CustomListView
	clv=editorLV
	clv.AsView.Width=clv.AsView.Parent.Width
	clv.AsView.Height=clv.AsView.Parent.Height
	If clv.Size=0 Then
		Return
	End If
	Dim itemWidth As Double = clv.AsView.Width
	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, editorLV.FirstVisibleIndex - ExtraSize) To Min(editorLV.LastVisibleIndex + ExtraSize,editorLV.Size - 1)
	'For i =  clv.FirstVisibleIndex To clv.LastVisibleIndex
		Dim p As Pane
		p=clv.GetPanel(i)
		If p.NumberOfNodes=0 Then
			Continue
		End If
		
		Dim sourceTa As TextArea = p.GetNode(0)
		Dim targetTa As TextArea = p.GetNode(1)
		If calculatedHeight.ContainsKey(sourceTa.Text&"	"&targetTa.Text)=False Then
			Dim sourcelbl,targetlbl As Label
			sourcelbl.Initialize("")
			sourcelbl.Font = fx.CreateFont("Tahoma",16,False,False)
			p.AddNode(sourcelbl,0, 0, itemWidth/2, -1)
			targetlbl.Initialize("")
			targetlbl.Font = fx.CreateFont("Tahoma",16,False,False)
			p.AddNode(targetlbl, 0, 0, itemWidth/2, -1)

			sourcelbl.Text = sourceTa.Text&CRLF&"12345"
			sourcelbl.WrapText = True
			targetlbl.Text = targetTa.Text&CRLF&"12345"
			targetlbl.WrapText = True
			Dim jo As JavaObject = p
			'force the label to refresh its layout.
			jo.RunMethod("applyCss", Null)
			jo.RunMethod("layout", Null)
			Dim h As Int = Max(Max(20, sourcelbl.Height + 10), targetlbl.Height + 10)
			calculatedHeight.Put(sourceTa.Text&"	"&targetTa.Text,h)
			setLayout(p,i,h)
			sourcelbl.RemoveNodeFromParent
			targetlbl.RemoveNodeFromParent
		Else
			Dim h As Int =calculatedHeight.get(sourceTa.Text&"	"&targetTa.Text)
			setLayout(p,i,h)
		End If
	Next
End Sub

Public Sub setLayout(p As Pane,index As Int,h As Int)
	Dim itemwidth As Double
	itemwidth=editorLV.AsView.Width
	p.Left=0
	p.SetSize(itemwidth,h+10dip)
	Dim sourceTa As TextArea = p.GetNode(0)
	Dim targetTa As TextArea = p.GetNode(1)
	sourceTa.Left=5dip
	sourceTa.SetSize(itemwidth/2-15dip,h+5dip)
	targetTa.Left=sourceTa.Left+sourceTa.Width
	targetTa.SetSize(itemwidth/2-15dip,h+5dip)
	editorLV.ResizeItem(index,h+10dip)
End Sub

Sub editorLV_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	If editorLV.Size=0 Then
		Return
	End If
	currentProject.fillPane(FirstIndex,LastIndex)
	CallSubDelayed(Me,"ListViewParent_Resize")
	currentProject.saveAlltheTranslation(FirstIndex,LastIndex)
End Sub


Sub TabPane1_TabChanged (SelectedTab As TabPage)
    	
End Sub

Sub searchTableView_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		If searchTableView.SelectedRowValues<>Null Then
			Dim index As Int
			index=searchTableView.SelectedRowValues(0)
			Log(index)
			Log(currentProject.segments.Get(index))
			Dim context As String
			'For i=Max(index-5,0) To Min(index+5,currentProject.segments.Size-1)
			'	Dim segment As List
			'	segment=currentProject.segments.Get(i)
			'	context=segment.Get(2)&context
			'Next
			For Each row() As String In searchTableView.Items
				context=context&row(0)&" "&row(1)&CRLF&"  "&row(2)&CRLF&CRLF
			Next
			Dim viewSegmentForm As viewSegment
			viewSegmentForm.Initialize
			viewSegmentForm.show(context)
		End If
	End If
End Sub

Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount=2 Then
		fillWithTM
	End If
End Sub

Sub fillWithTM
	If tmTableView.Items.Size<>0 Then
		Log(tmTableView.SelectedRow)
		If tmTableView.SelectedRow=-1 Then
			tmTableView.SelectedRow=0
		End If
		If tmTableView.SelectedRowValues<>Null And editorLV.Size<>0 Then
			Dim pane As Pane
			pane=editorLV.GetPanel(currentProject.lastEntry)
			Dim targetTextArea As TextArea
			targetTextArea=pane.GetNode(1)
			targetTextArea.Text=tmTableView.SelectedRowValues(2)
		End If
	End If

End Sub

Sub addTermButton_MouseClicked (EventData As MouseEvent)
	If currentProject.IsInitialized Then
		currentProject.projectTerm.addTerm(sourceTermTextField.Text,targetTermTextField1.Text)
	End If
End Sub

Sub termLV_MouseClicked (EventData As MouseEvent)
	If termLV.SelectedItem<>Null Then
		Dim p As Pane
		p=termLV.SelectedItem
		Dim lbl As Label
		lbl=p.GetNode(1)
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		Dim targetTextArea As TextArea
		targetTextArea=pane.GetNode(1)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionStart)&lbl.Text&targetTextArea.Text.SubString2(targetTextArea.SelectionStart,targetTextArea.Text.Length)
	End If
End Sub

Sub tmTableView_SelectedRowChanged(Index As Int, Row() As Object)
	If Row<>Null And Row.Length<>0 Then
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		Dim sourceTextArea As TextArea
		sourceTextArea=pane.GetNode(0)
		If Row(1)="" Then
			LogWebView.LoadHtml(Utils.buildHtmlString(Row(2)))
			Return
		End If
		Dim html As String
		html=editDistance.showDiff(sourceTextArea.Text,Row(1)).Replace("</body>","<p>"&Row(2)&"</p></body>")
		LogWebView.LoadHtml(html)
	End If

End Sub

Sub searchTableView_Action
	Dim mi As MenuItem
	mi=Sender
	Select mi.Text
		Case "Go to the segment"
			If searchTableView.SelectedRowValues<>Null Then
				Dim index As Int
				index=searchTableView.SelectedRowValues(0)
				editorLV.JumpToItem(index)
			End If
	End Select
End Sub

Public Sub closeProject
	autosaveTimer.Enabled=False
	If currentProject.IsInitialized Then
		If currentProject.projectTM.IsInitialized Then
			currentProject.projectTM.close
		End If
		Dim currentProject As Project
		tmTableView.ClearSelection
		tmTableView.Items.Clear
		projectTreeTableView.ClearSelection
		projectTreeTableView.Root.Children.Clear
		editorLV.Clear
		MainForm.Title="BasicCAT"
		Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	End If
End Sub


Sub segmentSearchToggleButton_SelectedChange(Selected As Boolean)
	'toggleTableOrTextArea(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
	toggleTableOrWebView(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
End Sub

Sub TMViewToggleButton_SelectedChange(Selected As Boolean)
	toggleTableOrTextArea(Selected,TMViewToggleButton,viewTMTextArea,tmTableView)
End Sub

Public Sub changeWhenSegmentOrSelectionChanges
	If TabPane1.SelectedIndex=1 Then
		If segmentSearchToggleButton.Selected=False Then
			segmentSearchToggleButton_SelectedChange(False)
		End If
	Else
		If TMViewToggleButton.Selected=False Then
			TMViewToggleButton_SelectedChange(False)
		End If
	End If
End Sub


Sub toggleTableOrWebView(selected As Boolean,tb As ToggleButton, wv As WebView,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		Dim html As String
		Dim htmlhead As String
		htmlhead=$"<!DOCTYPE HTML><html><head><meta charset="utf-8" />
		<style type="text/css">
		p {font-size: 18px}
		#selected {color:green;}
		</style></head><body>"$
		Dim htmlend As String
		htmlend="</body></html>"
		tb.Text="C"
		tv.Visible=False
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			html=html&index&"<br/>"&row(1).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&row(2).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&"<br />"
		Next
		wv.LoadHtml(htmlhead&html&htmlend)
	End If
End Sub

Sub toggleTableOrTextArea(selected As Boolean,tb As ToggleButton, ta As TextArea,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		tb.Text="C"
		tv.Visible=False
		ta.Text=""
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			ta.Text=ta.Text&index&CRLF&row(1)&CRLF&row(2)&CRLF&CRLF
		Next
	End If
End Sub

Public Sub updateSegmentLabel(current As String,total As String)
	segmentLabel.Text=(current+1)&"/"&total
End Sub

Public Sub getLeft As Double
	'Return MainForm.WindowLeft+mainSplitPane.DividerPositions(0)*mainSplitPane.Width+editorLV.AsView.Left
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(0)-MainForm.WindowLeft
End Sub

Public Sub getTop As Double
	'Return MainForm.WindowTop+(1-rightSplitPane.DividerPositions(0))*rightSplitPane.Height+editorLV.AsView.Top
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(1)-MainForm.WindowTop
End Sub

Sub autosaveTimer_Tick
	If currentProject.IsInitialized=False Then
		Return
	End If
	If currentProject.path="" Then
		Return
	Else
		createBakupFiles
		currentProject.save
	End If
End Sub

Sub createBakupFiles
	Log(File.Exists(currentProject.path,"bak"))
    If File.Exists(currentProject.path,"bak")=False Then
		File.MakeDir(currentProject.path,"bak")
    End If
	Utils.CopyFolder(File.Combine(currentProject.path, "work"),File.Combine(currentProject.path, "bak"))
	File.Copy(currentProject.path,"project.json",File.Combine(currentProject.path,"bak"),"project.json")
End Sub

Public Sub updateSavedTime
	operationLabel.Text="Project saved at "&DateTime.Time(DateTime.Now)
End Sub

Sub checkLV_MouseClicked (EventData As MouseEvent)
	
End Sub

Public Sub addCheckList(replacements As List, message As String,offset As Int,length As Int,context As String,entry As Int)
	Try
	
		TabPane1.SelectedIndex=2
		checkLV.Clear
		Log(offset)
		Log(context)
		Dim tf As TextFlow
		tf.Initialize
		tf.AddText("message:").SetUnderline(True)
		tf.AddText(" "&message&CRLF)
		tf.AddText("context: "&context.SubString2(0,offset))
		tf.AddText(context.SubString2(offset,offset+length)).SetColor(fx.Colors.Red)
		tf.AddText(context.SubString2(offset+length,context.Length))
		Dim p As Pane=tf.CreateTextFlow
		p.SetSize(checkLV.AsView.Width,Utils.MeasureMultilineTextHeight(fx.DefaultFont(15),checkLV.AsView.Width,tf.getText))
		checkLV.Add(p,"")
		For Each replacement As Map In replacements
			Dim values As List
			values.Initialize
			values.Add(replacement.Get("value"))
			values.Add(offset)
			values.Add(length)
			values.Add(entry)
			checkLV.AddTextItem("replacement: "&replacement.Get("value"),values)
		Next
	Catch
		Log(LastException)
End Try
End Sub

Public Sub noErrors
	checkLV.Clear
	checkLV.AddTextItem("No errors","")
End Sub

Sub checkLV_ItemClick (Index As Int, Value As Object)
	Log(Value)
End Sub


Sub addPositionChangedEvent(divider As Object,eventName As String)
	Dim Obj As Reflector
	Obj.Target = divider
	Obj.AddChangeListener(eventName, "positionProperty")
End Sub

Sub dividerPosition_changed(old As Object, new As Object)
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub