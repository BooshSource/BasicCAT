AppType=JavaFX
Build1=Default,org.xulihang.basiccat
File1=.gitignore
File10=dictWebview.bjl
File11=editor.bjl
File12=ErrorReporter.bjl
File13=FontPicker.bjl
File14=Fonts.xml
File15=generalProjectSetting.bjl
File16=generalSetting.bjl
File17=HistoryItem.bjl
File18=HistoryViewer.bjl
File19=importDialog.bjl
File2=appearance.bjl
File20=inputbox.bjl
File21=inputTextArea.bjl
File22=lang.conf
File23=LangaugePairSelector.bjl
File24=langcodes.txt
File25=languageChooser.bjl
File26=languagesWithoutSpace.txt
File27=leftProject.bjl
File28=Log.bjl
File29=lowerRight.bjl
File3=autocomplete.bjl
File30=main.bjl
File31=menuText.txt
File32=MTCompare.bjl
File33=mtparamfiller.bjl
File34=mtSetting.bjl
File35=oneterm.bjl
File36=operation.bjl
File37=pdf2txt.bjl
File38=pluginsSetting.bjl
File39=preferences.bjl
File4=autocorrectItem.bjl
File40=preferences.conf
File41=pretranslate.bjl
File42=preview.bjl
File43=progress.bjl
File44=projectSetting.bjl
File45=quickfillSetting.bjl
File46=right.bjl
File47=searchandreplace.bjl
File48=searchTableView.bjl
File49=SearchView.bjl
File5=autocorrectSetting.bjl
File50=segment.bjl
File51=segmentation_en.conf
File52=segmentation_en_exception.conf
File53=segmentation_en_idml.conf
File54=segmentation_zh.conf
File55=segmentation_zh_exception.conf
File56=segmentationRules.srx
File57=serverLanucher.bjl
File58=settingLanguagecheck.bjl
File59=settingVersionControl.bjl
File6=basiccat.jpg
File60=SourceEditor.bjl
File61=statistics.bjl
File62=supportedFiles.txt
File63=tableview.bjl
File64=tabpane.bjl
File65=teamSetting.bjl
File66=term.bjl
File67=TermEditor.bjl
File68=TermManager.bjl
File69=termSetting.bjl
File7=checkList.bjl
File70=TMEditor.bjl
File71=TMManager.bjl
File72=tmSetting.bjl
File73=upperRight.bjl
File74=version.txt
File75=viewSegment.bjl
File76=wordLookupSetting.bjl
File8=confirmReview.bjl
File9=dictList.txt
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup51=Default Group
FileGroup52=Default Group
FileGroup53=Default Group
FileGroup54=Default Group
FileGroup55=Default Group
FileGroup56=Default Group
FileGroup57=Default Group
FileGroup58=Default Group
FileGroup59=Default Group
FileGroup6=Default Group
FileGroup60=Default Group
FileGroup61=Default Group
FileGroup62=Default Group
FileGroup63=Default Group
FileGroup64=Default Group
FileGroup65=Default Group
FileGroup66=Default Group
FileGroup67=Default Group
FileGroup68=Default Group
FileGroup69=Default Group
FileGroup7=Default Group
FileGroup70=Default Group
FileGroup71=Default Group
FileGroup72=Default Group
FileGroup73=Default Group
FileGroup74=Default Group
FileGroup75=Default Group
FileGroup76=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library10=jshell
Library11=jreflection
Library12=encryption
Library13=byteconverter
Library14=jstringutils
Library15=jawtrobot
Library16=jxmlsax
Library17=xmlbuilder
Library18=okhttp
Library19=abplugin
Library2=jfx
Library20=jokhttputils2
Library21=cssutils
Library22=b4jdragtome
Library23=threading
Library24=jpoi
Library25=jbitmapcreator
Library3=javaobject
Library4=json
Library5=apachestringutilsb4j
Library6=jxui
Library7=jsql
Library8=jrandomaccessfile
Library9=jb4xencryption
Module1=FileChooserUtils
Module10=preTranslateDialog
Module11=Previewer
Module12=xliffFilter
Module13=idmlFilter
Module14=LanguageTool
Module15=MT
Module16=MTParamsFiller
Module17=Utils
Module18=Preferences
Module19=filterGenericUtils
Module2=Project
Module20=idmlUtils
Module21=TMX
Module22=Xml2Map
Module23=searchAndReplaceDialog
Module24=confirmReviewDialog
Module25=XMLUtils
Module26=HistoryRecord
Module27=Map2Xml
Module28=ErrorReporter
Module29=TMManager
Module3=segmentation
Module30=TermManager
Module31=importDialog
Module32=statistics
Module33=OperationDialog
Module34=LanguagePairSelector
Module35=git
Module36=zip4j
Module37=progressDialog
Module38=pdfbox
Module39=PDF2TXT
Module4=CustomListView
Module40=languageChooser
Module41=AutoSaver
Module42=SourceTextEditor
Module43=InputTextAreaBox
Module44=tikal
Module45=ITP
Module46=SearchView
Module47=icu4j
Module48=FileUtils
Module49=SRX
Module5=txtFilter
Module50=POIWord
Module51=dictWebView
Module52=FontPicker
Module53=TermEditor
Module54=HistoryViewer
Module55=ClientKVS
Module56=editDistance
Module57=InputBox
Module58=TBX
Module59=CallSubUtils
Module6=TM
Module60=viewSegment
Module61=serverLauncher
Module62=TMEditor
Module63=TextFlow
Module64=opennlp
Module65=coordinate
Module66=MTCompare
Module7=Term
Module8=KeyValueStore
Module9=ProjectSettings
NumberOfFiles=76
NumberOfLibraries=25
NumberOfModules=66
Version=7.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600
#End Region


#AdditionalJar: sqlite-jdbc-3.23.1
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: fuzzywuzzy-1.1.10
#AdditionalJar: zip4j-1.3.2
#AdditionalJar: opennlp-tools-1.9.0
#AdditionalJar: icu4j

'-------- for jgit
#AdditionalJar: org.eclipse.jgit-5.1.1.201809181055-r
#AdditionalJar: jsch-0.1.54
#AdditionalJar: jzlib-1.1.1
#AdditionalJar: JavaEWAH-1.1.6
#AdditionalJar: slf4j-api-1.7.2
#AdditionalJar: slf4j-simple-1.7.25

'-------- for alimt
#AdditionalJar: aliyun-java-sdk-alimt-1.0.3
#AdditionalJar: aliyun-java-sdk-core-4.4.2
#AdditionalJar: httpcore-4.4.9
#AdditionalJar: httpclient-4.5.6
#AdditionalJar: gson-2.8.5

'-------- for pdfbox
#AdditionalJar: pdfbox-2.0.12
#AdditionalJar: fontbox-2.0.12
#AdditionalJar: commons-logging-1.2

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private mainSplitPane As SplitPane
	Private upperRightSplitPane As SplitPane
	Private rightSplitPane As SplitPane
	Public editorLV As ListView
	Public projectTreeTableView As TreeTableView
	Public currentProject As Project
	Private lowerRightSplitPane As SplitPane
	Public TabPane1 As TabPane
	Public LogWebView As WebView
	Public tmTableView As TableView
	Public searchTableView As TableView
	Private addTermButton As Button
	Public sourceTermTextField As TextField
	Public targetTermTextField1 As TextField
	Public termLV As ListView
	Public calculatedHeight As Map
	Public preferencesMap As Map
	Private contextWebView As WebView
	Private segmentSearchToggleButton As ToggleButton
	Private TMViewToggleButton As ToggleButton
	Private viewTMTextArea As TextArea
	Private segmentLabel As Label
	Private MenuBar1 As MenuBar
	Public pre As Previewer
	Private operationLabel As Label
	Private checkLV As CustomListView
	Public nlp As opennlp
	Public plugin As ABPlugin
	Private dw As dictWebView
	Type Item (UserField As String, KeyField As String, ValueField() As Byte, IdField As Long, TimeField As Long)
	Type Task (TaskName As String, TaskItem As Item, TaskKey As String)
	Type Range (firstIndex As Int,lastIndex As Int)
	Type Progress (Done As Int,Total As Int)
	Private Drag As B4JDragToMe
	Private projectAutoSaver As AutoSaver
	Public TargetFileGeneratingProgress As Progress
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	init
	
	'Log(fx.Screens)
	'Log(GetSystemProperty("os.name","windows"))
	If Args.Length=1 Then
		Try
			openProject(Args(0))
		Catch
			Log(LastException)
		End Try
	End If
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Dim aErrorReporter As ErrorReporter
	aErrorReporter.Initialize
	aErrorReporter.ShowAndWait("error: "&Error&CRLF&"StackTrace: "&StackTrace)
	Return False
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	adjustDividerPositions
	calculatedHeight.Clear
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	If currentProject.IsInitialized Then
		If currentProject.contentChanged Then
			Dim result As Int
			result=fx.Msgbox2(MainForm,"Project is changed, save before exit?","","Yes","Cancel","Exit without saving",fx.MSGBOX_CONFIRMATION)
			Select result
				'yes -1, no -2, cancel -3
				Case -1
					currentProject.save
				Case -3
					EventData.Consume
			End Select
		End If
	End If
End Sub

Sub init

	mainSplitPane.LoadLayout("leftProject")
	mainSplitPane.LoadLayout("right")

	rightSplitPane.LoadLayout("upperRight")
	rightSplitPane.LoadLayout("lowerRight")
	
	upperRightSplitPane.LoadLayout("editor")
	upperRightSplitPane.LoadLayout("term")
	
	Dim jo As JavaObject
	jo=upperRightSplitPane
	addPositionChangedEvent(jo.RunMethodJO("getDividers",Null).RunMethodJO("get",Array(0)),"dividerPosition")
	
	lowerRightSplitPane.LoadLayout("Log")
	lowerRightSplitPane.LoadLayout("tabpane")
	TabPane1.LoadLayout("tableview", "TM Match")
	TabPane1.LoadLayout("searchTableView", "Segment Search")
	TabPane1.LoadLayout("checkList", "LanguageCheck")
	calculatedHeight.Initialize
	adjustDividerPositions
	preferencesMap.Initialize

	If File.Exists(File.DirData("BasicCAT"),"preferences.conf")=False Then
		File.Copy(File.DirAssets,"preferences.conf",File.DirData("BasicCAT"),"preferences.conf")
	End If
	Dim json As JSONParser
	json.Initialize(File.ReadString(File.DirData("BasicCAT"),"preferences.conf"))
	preferencesMap=json.NextObject
	
	tmTableView.SetColumnWidth(1,200)
	tmTableView.SetColumnWidth(2,200)
	Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	Drag.Initialize(projectTreeTableView, "Drag")
	loadPlugins

End Sub

Public Sub initializeNLP(sourcelang As String)
	Try
		nlp.Initialize(sourcelang)
	Catch
		Log(LastException)
	End Try
End Sub


Public Sub loadPlugins
	Dim dir As String
	If preferencesMap.ContainsKey("pluginDir") Then
		dir=preferencesMap.Get("pluginDir")
	Else
		dir=File.Combine(File.DirApp,"plugins")
	End If
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

Sub Drag_ReceivedFilePath (Filepath As String)
	If Filepath.EndsWith(".bcp") Then
		openProject(Filepath)
		Return
	End If
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	If File.IsDirectory(Filepath,"")=False Then
		addFile(Filepath)
	Else
		addFolder(Filepath)
	End If
End Sub

Sub adjustDividerPositions
	mainSplitPane.DividerPositions=Array As Double(0.2)
	rightSplitPane.DividerPositions=Array As Double(0.8)
	
	lowerRightSplitPane.DividerPositions=Array As Double(0.2)
	upperRightSplitPane.DividerPositions=Array As Double(0.8)
End Sub

Public Sub addProjectTreeTableItem
	For Each item As String In Array As String("Project Files","Translation Memory","Terminology","Statistics","Preview")
		Dim lbl As Label
		lbl.Initialize("lbl")
		lbl.Text=item
		If item="Project Files" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Add File","addFileMi")
			Dim mi2 As MenuItem
			mi2.Initialize("Add Folder","addFolderMi")
			cm.MenuItems.Add(mi)
			cm.MenuItems.Add(mi2)
			lbl.ContextMenu=cm
		End If
		
		Dim tti As TreeTableItem
		tti.Initialize("tti",Array As Object(lbl))
		
		projectTreeTableView.Root.Children.Add(tti)
	Next
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Select mi.Text
		Case "_Open"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("project files",Array As String("*.bcp"))
			Dim path As String
			path=fc.ShowOpen(MainForm)
			If path="" Then
				Return
			End If
			openProject(path)
		Case "en to zh Project"
			newProject("en","zh")
		Case "zh to en Project"
			newProject("zh","en")
		Case "other language pair"
			Dim languageSelector As LanguagePairSelector
			languageSelector.Initialize
			Dim result As Map
			result=languageSelector.ShowAndWait
			If result.ContainsKey("source") Then
				newProject(result.Get("source"),result.Get("target"))
			End If
		Case "_Save"
			If currentProject.IsInitialized=False Then
				Return
			End If
            setAutosave(True)
			If currentProject.path="" Then
				Dim fc As FileChooser
				fc.Initialize
				fc.Title="Please enter the folder name to store the project."
				Dim path As String
				path=fc.ShowSave(MainForm)
				If path="" Then
					Return
				End If
				If File.Exists(path,"") Then
					fx.Msgbox(MainForm,"There has already been a file.","")
					Return
				End If
				currentProject.path=path
				currentProject.save
				MainForm.Title=path
				Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
			Else
				currentProject.save
			End If
		Case "_Generate target files"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateTargetFiles
		Case "Generate Bilingual Files (for xliff)"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateBilingualTargetFiles
		Case "_Close"
			Log("closing")
			closeProject
		Case "Go to the next untranslated segment"
			For i=currentProject.lastEntry To currentProject.segments.Size-1
				Dim bitext As List
				bitext=currentProject.segments.Get(i)
				If bitext.Get(1)="" Then
					editorLV.ScrollTo(i)
					Return
				End If
			Next
		Case "Fill with the first matched TM"
			fillWithTM
		Case "Fill with the next tag"
			fillWithTheNextTag
		Case "Copy source text to target"
			copySourceToTarget
		Case "Search and Replace"
			Dim sap As searchAndReplaceDialog
			sap.Initialize
			sap.show
		Case "Show quickfill dropdown"
			showQuickfillDropdown
		Case "Show online dictionary dropdown"
			showDictDropdown
		Case "Show segment history"
			showSegmentHistory
		Case "Show/Edit notes of the current segmnet"
			If currentProject.segments.Size<>0 Then
				Dim inp As InputTextAreaBox
				inp.Initialize
				inp.showAndWait
			End If
		Case "Edit the source text of the current segment"
			editSource
		Case "Mark the current segment as neglected/not neglected"
			changeNeglectedStatus
		Case "Project _Settings"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ps As ProjectSettings
			ps.Initialize
			Dim resultList As List
			resultList=ps.ShowAndWait
			If resultList.Get(0)<>"canceled" Then
				currentProject.saveSettings(resultList.Get(1))
			End If
		Case "Pre-_translate"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			If editorLV.Items.Size=0 Then
				fx.Msgbox(MainForm,"Please open a file first.","")
				Return
			End If
			Dim ptDialog As preTranslateDialog
			ptDialog.Initialize
			currentProject.preTranslate(ptDialog.ShowAndWait)
		Case "Git _Commit"
			If currentProject.gitcommit(True,False)=False Then
				fx.Msgbox(MainForm,"Git not configured.","")
			End If
		Case "Git Commit and _Push"
			If currentProject.gitcommit(False,False)=False Then
				fx.Msgbox(MainForm,"Git not configured.","")
			End If
		Case "_Exit"
			'Dim currentProject as Project
			If currentProject.IsInitialized Then
				If currentProject.projectTM.IsInitialized Then
					currentProject.projectTM.close
					Sleep(0)
				End If
			End If
			ExitApplication
		Case "Preferences"
			Dim pref As Preferences
			pref.Initialize
			pref.ShowAndWait
		Case "PDF2TXT"
			Dim p2t As PDF2TXT
			p2t.Initialize
			p2t.Show
		Case "Server Launcher"
			Dim sl As serverLauncher
			sl.Initialize
			sl.show
		Case "MT Compare"
			Dim mtc As MTCompare
			mtc.Initialize
			mtc.show
		Case "Documentation"
			fx.ShowExternalDocument("http://docs.basiccat.org")
		Case "_About"
			Dim version As String
			version=File.ReadString(File.DirAssets,"version.txt")
			fx.Msgbox(MainForm,"BasicCAT "&version&CRLF&"@xulihang 2019","BasicCAT")
	End Select
End Sub

Sub editSource
	If currentProject.segments.Size<>0 Then
		Dim source,fullsource As String
		Dim segment As List = currentProject.segments.Get(currentProject.lastEntry)
		source=segment.Get(0)
		fullsource=segment.Get(2)
		Dim sourceEditor As SourceTextEditor
		sourceEditor.Initialize(source,fullsource)
		Dim editResult As Map
		editResult=sourceEditor.ShowAndWait
		source=editResult.GetDefault("source","")
		fullsource=editResult.GetDefault("fullsource","")
		segment.Set(0,source)
		segment.Set(2,fullsource)
		If editorLV.Items.Size<>0 Then
			Try
				Dim p As Pane
				p=editorLV.Items.Get(currentProject.lastEntry)
			Catch
				Return
				Log(LastException)
			End Try
			Dim sourceTextArea As TextArea=p.GetNode(0)
			sourceTextArea.Text=source
		End If
	End If
End Sub

Sub newProject(sourceLang As String,targetLang As String)
	If currentProject.IsInitialized Then
		fx.Msgbox(MainForm,"Please close the current project first.","")
		Return
	End If
	currentProject.Initialize
	currentProject.newProjectSetting(sourceLang,targetLang)
	MainForm.Title="Untitled-1"
	addProjectTreeTableItem
	Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
End Sub


Sub openProject(path As String)
	If currentProject.IsInitialized Then
		fx.Msgbox(MainForm,"Please close the current project first.","")
		Return
	End If
	currentProject.Initialize
	currentProject.open(path)
	setAutosave(True)
	MainForm.Title=getProjectname(path)
	Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
End Sub

Public Sub closeProject
	setAutosave(False)
	If currentProject.IsInitialized Then
		If currentProject.projectTM.IsInitialized Then
			currentProject.projectTM.close
		End If
		Dim currentProject As Project
		tmTableView.ClearSelection
		tmTableView.Items.Clear
		projectTreeTableView.ClearSelection
		projectTreeTableView.Root.Children.Clear
		editorLV.Items.Clear
		termLV.Items.Clear
		MainForm.Title="BasicCAT"
		Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	End If
End Sub

Sub setAutosave(enabled As Boolean)
	If projectAutoSaver.IsInitialized=False Then
		projectAutoSaver.Initialize
	End If
	projectAutoSaver.Enabled=enabled
End Sub

Sub fillWithTM
	If tmTableView.Items.Size<>0 Then
		Log(tmTableView.SelectedRow)
		If tmTableView.SelectedRow=-1 Then
			tmTableView.SelectedRow=0
		End If
		If tmTableView.SelectedRowValues<>Null And editorLV.Items.Size<>0 Then
			Try
				Dim pane As Pane
				pane=editorLV.Items.Get(currentProject.lastEntry)
			Catch
				Log(LastException)
				Return
			End Try
			Dim source As String=tmTableView.SelectedRowValues(1)
			Dim translation As String=tmTableView.SelectedRowValues(2)
			currentProject.setTranslation(currentProject.lastEntry,translation,True,source)
			currentProject.fillOne(currentProject.lastEntry,translation)
			'Dim targetTextArea As TextArea
			'targetTextArea=pane.GetNode(1)
			'targetTextArea.Text=translation
			currentProject.contentIsChanged
		End If
	End If
End Sub

Sub fillWithTheNextTag
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Return
		Log(LastException)
	End Try

	Dim sourceTextArea As TextArea=p.GetNode(0)
	Dim targetTextArea As TextArea=p.GetNode(1)
	
	Dim tagsInSource As List
	tagsInSource.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",sourceTextArea.Text)
	Do While tagMatcher.Find
		tagsInSource.Add(tagMatcher.Match)
	Loop
	
	Dim tagsInTarget As List
	tagsInTarget.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",targetTextArea.Text)
	Do While tagMatcher.Find
		tagsInTarget.Add(tagMatcher.Match)
	Loop
	
	For Each tag As String In tagsInTarget
		Try
			tagsInSource.RemoveAt(tagsInSource.IndexOf(tag))
		Catch
			Log(LastException)
		End Try
	Next
	If tagsInSource.Size<>0 Then
		Dim selectionEnd As Int=targetTextArea.selectionEnd
		Dim tag As String=tagsInSource.Get(0)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionEnd)&tag&targetTextArea.Text.SubString2(targetTextArea.SelectionEnd,targetTextArea.Text.Length)
		targetTextArea.SetSelection(selectionEnd+tag.Length,selectionEnd+tag.Length)
	End If
End Sub

Sub copySourceToTarget
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Return
		Log(LastException)
	End Try
	Dim sourceTextArea As TextArea=p.GetNode(0)
	Dim targetTextArea As TextArea=p.GetNode(1)
	targetTextArea.Text=sourceTextArea.Text
End Sub

Sub showQuickfillDropdown
	If editorLV.Items.Size=0 Then
		Return
	End If
	
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try


	Dim ta As TextArea=p.GetNode(1)
	Dim cm As ContextMenu
	cm.Initialize("")
	Dim quickfillList As List
	quickfillList.Initialize
	If currentProject.settings.ContainsKey("quickfill_includeterm") Then
		If currentProject.settings.Get("quickfill_includeterm")=True Then
			For Each termPane As Pane In termLV.Items
				quickfillList.Add(termPane.Tag)
			Next
		End If
	End If
	If currentProject.settings.ContainsKey("quickfill") Then
		quickfillList.AddAll(currentProject.settings.Get("quickfill"))
	Else
		quickfillList.AddAll(Array As String("——","¥","©","®","™","『","』"))
	End If
	
	For Each item As String In quickfillList
		If item="" Then 
			Continue
		End If
		Log(item)
		Dim mi As MenuItem
		mi.Initialize(item,"quickFillMi")
		mi.Tag=item
		cm.MenuItems.Add(mi)
	Next
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub quickFillMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Log(mi.Tag)
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try
	Dim ta As TextArea=p.GetNode(1)
	Dim selectionEnd As Int=ta.selectionEnd
	ta.Text=ta.Text.SubString2(0,ta.SelectionEnd)&mi.Text&ta.Text.SubString2(ta.SelectionEnd,ta.Text.Length)
	ta.SetSelection(selectionEnd+mi.Text.Length,selectionEnd+mi.Text.Length)
End Sub

Sub showSegmentHistory
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try

	Dim ta As TextArea=p.GetNode(0)
    Dim hisViewer As HistoryViewer
	hisViewer.Initialize
	Dim historyList As List
	historyList=currentProject.projectHistory.getSegmentHistory(ta.Text,currentProject.currentFilename)
	hisViewer.Show(historyList)
End Sub

Sub showDictDropdown
	If editorLV.Items.Size=0 Then
		Return
	End If
	Try
		Dim p As Pane
		p=editorLV.Items.Get(currentProject.lastEntry)
	Catch
		Log(LastException)
		Return
	End Try
	Dim ta As TextArea=p.GetNode(0)
	Dim selected As String
	selected=ta.Text.SubString2(ta.SelectionStart,ta.SelectionEnd)
	If selected="" Then
		Return
	End If
	Dim cm As ContextMenu
	cm.Initialize("cm")
	Dim dictMap As Map
    dictMap.Initialize
	Dim dictList As List
	Dim configPath As String=File.Combine(currentProject.path,"config")
	If File.Exists(configPath,"dictList.txt") Then
		dictList=File.ReadList(configPath,"dictList.txt")
	Else
		dictList=File.ReadList(File.DirAssets,"dictList.txt")
	End If
	
	For Each line As String In dictList
		dictMap.Put(Regex.Split("	",line)(0),Regex.Split("	",line)(1))
	Next
	
	For Each dictName As String In dictMap.Keys
		Dim mi As MenuItem
		mi.Initialize(dictName, "dictLookupMi")
        Dim url As String
		url=dictMap.Get(dictName)
		Dim tagList As List
		tagList.Initialize
		tagList.Add(url)
		tagList.Add(selected)
		mi.Tag=tagList
		cm.MenuItems.Add(mi)
	Next
	Sleep(100)

	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta)
	Log(map1)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub dictLookupMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(Sender)
	Dim tagList As List
	tagList.Initialize
	tagList=mi.Tag
	If dw.IsInitialized=False Then
		dw.Initialize(currentProject.path)
	End If
	dw.show
	dw.loadUrl(tagList.Get(0),tagList.Get(1))
	
End Sub

Sub changeNeglectedStatus
	If currentProject.segments.Size<>0 Then
		Dim isNeglected As String="no"
		Dim segment As List
		segment=currentProject.segments.Get(currentProject.lastEntry)
		Dim extra As Map
		extra=segment.Get(4)
		If extra.ContainsKey("neglected") Then
			Select extra.Get("neglected")
				Case "yes"
					isNeglected="no"
				Case "no"
					isNeglected="yes"
			End Select
		Else
			isNeglected="yes"
		End If
		extra.Put("neglected",isNeglected)
		Try
			Dim p As Pane
			p=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Return
			Log(LastException)
		End Try
		Dim sourceTa As TextArea=p.GetNode(0)
		Dim targetTa As TextArea=p.GetNode(1)
		Select isNeglected
			Case "no"
				sourceTa.Enabled=True
				targetTa.Enabled=True
			Case "yes"
				sourceTa.Enabled=False
				targetTa.Enabled=False
		End Select
		currentProject.contentIsChanged
	End If
End Sub

Sub addFolderMi_Action
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
	Return
	End If
	Dim dc As DirectoryChooser
	dc.Initialize
	
	Dim path As String = dc.Show(MainForm)
	If path="" Then
		Return
	End If
	addFolder(path)
End Sub

Sub addFolder(path As String)
	Dim files,okapiExtractedFiles As List
	files.Initialize
	okapiExtractedFiles.Initialize

	OperationDialog.Show
	OperationDialog.SetButtonText("Importing...")
	OperationDialog.EnableOkayButton(False)
	'progressDialog.Show("Importing...","import")
	'progressDialog.update(0,0)
	wait for (addFiles(path,files,"",okapiExtractedFiles)) complete (success As Boolean)
	
	For Each subfolder As String In FileUtils.GetSubFolders(path)
		Dim unixLikePath As String=path.Replace("\","/")
		Dim unixSubfolderPath As String=subfolder.Replace("\","/")
		wait for (addFiles(subfolder,files,unixSubfolderPath.Replace(unixLikePath&"/","")&"/",okapiExtractedFiles)) complete (success As Boolean)
	Next
	
	Log("files"&files)
	Dim imported As Int=0

	For Each filename As String In files
		Log(filename)
		Dim isExtractedbyOkapi As Boolean
		If okapiExtractedFiles.IndexOf(filename)<>-1 Then
			isExtractedbyOkapi=True
		Else
			isExtractedbyOkapi=False
		End If
		imported=imported+1
		'Sleep(0)
		'progressDialog.update(imported,files.Size)
		wait for (addFileInFolder(path,filename,isExtractedbyOkapi)) complete (result As Object)
		
	Next
	currentProject.save
	OperationDialog.SetButtonText("Okay")
	OperationDialog.EnableOkayButton(True)
	'progressDialog.close
End Sub

Sub addFileInFolder(path As String,filename As String,isExtractedbyOkapi As Boolean) As ResumableSub
	wait For(currentProject.addFileInFolder(path,filename,isExtractedbyOkapi)) complete (result As Boolean)
	If result=True Then
		OperationDialog.Add(Array As String(filename,"imported"))
	Else
		If currentProject.files.IndexOf(filename)<>-1 Then
			OperationDialog.Add(Array As String(filename,"already existed"))
		Else
			OperationDialog.Add(Array As String(filename,"importing failed"))
		End If
		
	End If
	Return True
End Sub

Sub addFiles(path As String,files As List,prefix As String,okapiExtractedFiles As List) As ResumableSub
	For Each filename As String In File.ListFiles(path)
		If File.IsDirectory(path,filename)=False Then
			If isFiletypeSupported(filename) Then
				files.Add(prefix&filename)
			Else
				If currentProject.files.IndexOf(prefix&filename&".xlf")=-1 Then
					prefix=prefix.Replace("/",GetSystemProperty("file.separator","/"))
					Dim targetFilename As String
					targetFilename=File.Combine(File.Combine(File.Combine(currentProject.path,"source"),prefix),filename)
					FileUtils.createNonExistingDir(File.Combine(File.Combine(currentProject.path,"source"),targetFilename))
					Dim outputDir As String
					outputDir=File.GetFileParent(targetFilename)
					Dim sl,tl As String
					sl=currentProject.projectFile.Get("source")
					tl=currentProject.projectFile.Get("target")
					OperationDialog.Add(Array As String(prefix&filename,"converting to xliff using okapi"))
					wait for (tikal.extract(sl,tl,File.Combine(path,filename),outputDir)) complete (success As Boolean)
					If success=True Then
						files.Add(prefix&filename)
						okapiExtractedFiles.Add(prefix&filename)
					Else
						OperationDialog.Add(Array As String(prefix&filename,"failed"))
					End If
				Else
					OperationDialog.Add(Array As String(prefix&filename,"already existed"))
				End If
            End If
		End If
	Next
	Return True
End Sub

Sub isFiletypeSupported(filename As String) As Boolean
	filename=filename.ToLowerCase
	Dim extension As String=filename
	Try
		extension=filename.SubString2(filename.LastIndexOf(".")+1,filename.Length)
		Log(extension)
	Catch
		Log(LastException)
	End Try
	If supportedFilesList.IndexOf(extension)<>-1 Then
		Return True
	Else
		Return False
	End If
End Sub

Sub supportedFilesList As List
	Dim extensions As List
	extensions.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	For Each line As String In supportedFiles
		Dim data As List
		data.Initialize
		data.AddAll(Regex.Split("	",line))
		For i=1 To data.Size-1
			Dim extension As String
			extension=data.Get(i)
			extensions.Add(extension.Replace("*.",""))
		Next
	Next
	For Each pluginName As String In plugin.GetAvailablePlugins
		If pluginName.EndsWith("Filter") Then
			extensions.Add(pluginName.Replace("Filter",""))
		End If
	Next
	Log(extensions)
	Return extensions
End Sub

Sub addFileMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Dim fc As FileChooser
	fc.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	Dim descriptionList,filterList As List
	descriptionList.Initialize
	filterList.Initialize
	For Each filetype As String In supportedFiles
		Dim data As List
		data.Initialize
		data.AddAll(Regex.Split("	",filetype))
		For i=1 To data.Size-1
			descriptionList.Add(data.Get(0))
			filterList.Add(data.Get(i))
		Next
	Next
	Log(filterList)
	FileChooserUtils.AddExtensionFilters4(fc,descriptionList,filterList,True,"All",True)
	Dim path As String
	path=fc.ShowOpen(MainForm)
	addFile(path)
End Sub

Sub addFile(path As String)
	Log(path)
	Log(getFilename(path))
	If path="" Then
		Return
	else if currentProject.files.IndexOf(getFilename(path))<>-1 Then
		fx.Msgbox(MainForm,"A file with the same name already exists.","")
		Return
	End If
	

	If isFiletypeSupported(File.GetName(path))=False Then
		If currentProject.files.IndexOf(File.GetName(path)&".xlf")<>-1 Then
			fx.Msgbox(MainForm,"A file with the same name already exists.","")
			Return
		End If
		progressDialog.ShowWithoutProgressBar("Importing","import")
		progressDialog.update2("importing..."&path)
		Dim sl,tl As String
		sl=currentProject.projectFile.Get("source")
		tl=currentProject.projectFile.Get("target")

		wait for (tikal.extract(sl,tl,path,File.Combine(currentProject.path,"source"))) complete (success As Boolean)
		If success=True Then
			wait for (currentProject.addFile(path,True)) Complete (result As Object)
		Else
			fx.Msgbox(MainForm,"This file format is not supported.","")
		End If
	Else
		progressDialog.ShowWithoutProgressBar("Importing","import")
		progressDialog.update2("importing..."&path)
		wait for (currentProject.addFile(path,False)) Complete (result As Object)
		'Sleep(50)
	End If
	progressDialog.close
End Sub

Public Sub getFilename(path As String) As String
	Dim filename As String
	
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		filename=path.SubString2(path.LastIndexOf("\")+1,path.Length)
	Else
		filename=path.SubString2(path.LastIndexOf("/")+1,path.Length)
	End If
	Log(filename)
	Return filename
End Sub

Public Sub getProjectname(path As String) As String
	Dim Projectname As String
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		Projectname=path.SubString2(path.LastIndexOf("\"),path.Length)
		Projectname=path.Replace(Projectname,"")
	Else
		Projectname=path.SubString2(path.LastIndexOf("/"),path.Length)
		Projectname=path.Replace(Projectname,"")
		Log(LastException)
	End If
	Log(Projectname)
	Return Projectname
End Sub

'menu actions end
'-----------------------------

'editor relevant
'-----------------------------

Sub ListViewParent_Resize

	Dim lv As ListView
	lv=editorLV
	Dim visibleRange As Range=getVisibleRange(lv)
	Dim FirstVisibleIndex,LastVisibleIndex As Int
	FirstVisibleIndex=visibleRange.firstIndex
	LastVisibleIndex=visibleRange.lastIndex
	If lv.Items.Size=0 Then
		Return
	End If
	Dim itemWidth As Double = lv.Width
	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, FirstVisibleIndex - ExtraSize) To Min(LastVisibleIndex + ExtraSize,editorLV.Items.Size - 1)
        Try
			Dim p As Pane
			p=lv.Items.Get(i)
        Catch
	        Log(LastException)
			Continue
        End Try
		Dim sourceTa As TextArea = p.GetNode(0)
		Dim targetTa As TextArea = p.GetNode(1)
		If calculatedHeight.ContainsKey(sourceTa.Text&"	"&targetTa.Text)=False Then
			Dim sourcelbl,targetlbl As Label
			sourcelbl.Initialize("")
			targetlbl.Initialize("")
			setLabelFont(sourcelbl,"sourceFont")
			setLabelFont(targetlbl,"targetFont")
			Dim sourceHeight,targetHeight As Int
			Dim sourceLineHeight As Int=Utils.MeasureMultilineTextHeight(sourcelbl.Font,itemWidth/2-20dip,CRLF)
			Dim targetLineHeight As Int=Utils.MeasureMultilineTextHeight(targetlbl.Font,itemWidth/2-20dip,CRLF)
			Dim lineHeightTimes As Double
			lineHeightTimes=preferencesMap.GetDefault("lineheight",2/3)
			sourceHeight=Utils.MeasureMultilineTextHeight(sourcelbl.Font,itemWidth/2-20dip,sourceTa.Text)+sourceLineHeight*lineHeightTimes
			targetHeight=Utils.MeasureMultilineTextHeight(targetlbl.Font,itemWidth/2-20dip,targetTa.Text)+targetLineHeight*lineHeightTimes
			Dim h As Int = Max(Max(20, sourceHeight + 10), targetHeight + 10)
			calculatedHeight.Put(sourceTa.Text&"	"&targetTa.Text,h)
			setLayout(p,i,h)
			sourcelbl.RemoveNodeFromParent
			targetlbl.RemoveNodeFromParent
			'Do While isScrollBarVisible(sourceTa)
			'	Sleep(50)
			'	h = h+5dip
			'	calculatedHeight.Put(sourceTa.Text&"	"&targetTa.Text,h)
			'	setLayout(p,i,h)
			'Loop
		Else
			Dim h As Int =calculatedHeight.get(sourceTa.Text&"	"&targetTa.Text)
			setLayout(p,i,h)
		End If
	Next
End Sub

Sub isScrollBarVisible(ta As TextArea) As Boolean
	Try
		Dim jo As JavaObject
		jo=ta
		Dim ScrollBar As JavaObject
		ScrollBar=jo.RunMethodJO("lookup",Array(".scroll-bar:vertical"))
		If ScrollBar=Null Then
			Return False
		Else
			Return ScrollBar.RunMethod("isVisible",Null)
		End If
	Catch
		Log(LastException)
		Return False
	End Try
End Sub

Public Sub setLayout(p As Pane,index As Int,h As Int)
	Dim itemwidth As Double
	itemwidth=editorLV.Width
	p.Left=0
	p.SetSize(itemwidth-40dip,h)
	Dim sourceTa As TextArea = p.GetNode(0)
	Dim targetTa As TextArea = p.GetNode(1)
	sourceTa.Left=0
	sourceTa.SetSize(itemwidth/2-20dip,h)
	targetTa.Left=itemwidth/2-20dip
	targetTa.SetSize(itemwidth/2-20dip,h)
End Sub


Sub ListView1_ScrollPosition_Changed(OldVal As Object,NewVal As Object)
	'Log(NewVal)
	CallSubDelayed(Me,"checkVisibleRange")
End Sub

Sub checkVisibleRange
	Try
		Sleep(50)
		Dim currentVisibleRange As Range
		currentVisibleRange=getVisibleRange(editorLV)
		'If previousRange.lastIndex<>currentVisibleRange.lastIndex Or previousRange.firstIndex<>currentVisibleRange.firstIndex Then
			Log("visible range changed")
		'	previousRange=currentVisibleRange
			currentProject.fillPane(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
			CallSubDelayed(Me,"ListViewParent_Resize")
			currentProject.saveAlltheTranslationToSegmentsInVisibleArea(currentVisibleRange.firstIndex,currentVisibleRange.lastIndex)
		'End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub addScrollChangedEvent(lv As ListView)
	Try
		Dim jo As JavaObject
		jo=lv
		Dim ListViewScrollBar As JavaObject
		ListViewScrollBar=jo.RunMethodJO("lookup",Array(".scroll-bar:vertical"))
		Dim r As Reflector
		r.Target=ListViewScrollBar
		r.AddChangeListener("ListView1_ScrollPosition","valueProperty")
	Catch
		Log(LastException)
	End Try
End Sub

Sub getVisibleRange(lv As ListView) As Range
	Dim visibleRange As Range
	visibleRange.Initialize
	Try
		Dim jo As JavaObject
		jo=lv
		Dim VirtualFlow As JavaObject
		VirtualFlow=jo.RunMethodJO("getSkin",Null).RunMethodJO("getChildren",Null).RunMethodJO("get",Array(0))
		Dim lastVisibleCell As JavaObject
		lastVisibleCell=VirtualFlow.RunMethodJO("getLastVisibleCell",Null)
		Dim firstVisibleCell As JavaObject
		firstVisibleCell=VirtualFlow.RunMethodJO("getFirstVisibleCell",Null)
		visibleRange.firstIndex=firstVisibleCell.RunMethod("getIndex",Null)
		visibleRange.lastIndex=lastVisibleCell.RunMethod("getIndex",Null)
	Catch
		Log(LastException)
	End Try
	Return visibleRange
End Sub

'other controls
'------------------------------

Sub searchTableView_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		If searchTableView.SelectedRowValues<>Null Then
			Dim index As Int
			index=searchTableView.SelectedRowValues(0)
			Log(index)
			Log(currentProject.segments.Get(index))
			Dim context As String
			'For i=Max(index-5,0) To Min(index+5,currentProject.segments.Size-1)
			'	Dim segment As List
			'	segment=currentProject.segments.Get(i)
			'	context=segment.Get(2)&context
			'Next
			For Each row() As String In searchTableView.Items
				context=context&row(0)&" "&row(1)&CRLF&"  "&row(2)&CRLF&CRLF
			Next
			Dim viewSegmentForm As viewSegment
			viewSegmentForm.Initialize
			viewSegmentForm.show(context)
		End If
	End If
End Sub

Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount=2 Then
		fillWithTM
	End If
End Sub

Sub addTermButton_MouseClicked (EventData As MouseEvent)
	If currentProject.IsInitialized Then
		currentProject.projectTerm.addTerm(sourceTermTextField.Text,targetTermTextField1.Text)
	End If
End Sub

Sub termLV_MouseClicked (EventData As MouseEvent)
	If termLV.SelectedItem<>Null And EventData.PrimaryButtonPressed Then
		Dim p As Pane
		p=termLV.SelectedItem
		Dim lbl As Label
		lbl=p.GetNode(1)
		Try
			Dim pane As Pane
			pane=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Log(LastException)
			Return
		End Try
		Dim targetTextArea As TextArea
		targetTextArea=pane.GetNode(1)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionStart)&lbl.Text&targetTextArea.Text.SubString2(targetTextArea.SelectionStart,targetTextArea.Text.Length)
	End If
End Sub

Sub tmTableView_SelectedRowChanged(Index As Int, Row() As Object)
	If Row<>Null And Row.Length<>0 Then
		Try
			Dim pane As Pane
			pane=editorLV.Items.Get(currentProject.lastEntry)
		Catch
			Log(LastException)
			Return
		End Try

		Dim sourceTextArea As TextArea
		sourceTextArea=pane.GetNode(0)
		If Row(1)="" Then
			LogWebView.LoadHtml(Utils.buildHtmlString(Row(2)))
			Return
		End If
		Dim html As String
		html=editDistance.showDiff(sourceTextArea.Text,Row(1)).Replace("</body>","<p>"&Row(2)&"</p></body>")
		LogWebView.LoadHtml(html)
	End If

End Sub

Sub searchTableView_Action
	Dim mi As MenuItem
	mi=Sender
	Select mi.Text
		Case "Go to the segment"
			If searchTableView.SelectedRowValues<>Null Then
				Dim index As Int
				index=searchTableView.SelectedRowValues(0)
				editorLV.ScrollTo(index)
			End If
	End Select
End Sub

Sub segmentSearchToggleButton_SelectedChange(Selected As Boolean)
	'toggleTableOrTextArea(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
	toggleTableOrWebView(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
End Sub

Sub TMViewToggleButton_SelectedChange(Selected As Boolean)
	toggleTableOrTextArea(Selected,TMViewToggleButton,viewTMTextArea,tmTableView)
End Sub

Public Sub changeWhenSegmentOrSelectionChanges
	If TabPane1.SelectedIndex=1 Then
		If segmentSearchToggleButton.Selected=False Then
			segmentSearchToggleButton_SelectedChange(False)
		End If
	Else
		If TMViewToggleButton.Selected=False Then
			TMViewToggleButton_SelectedChange(False)
		End If
	End If
End Sub

Sub toggleTableOrWebView(selected As Boolean,tb As ToggleButton, wv As WebView,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		Dim html As String
		Dim htmlhead As String
		htmlhead=$"<!DOCTYPE HTML><html><head><meta charset="utf-8" />
		<style type="text/css">
		p {font-size: 18px}
		#selected {color:green;}
		</style></head><body>"$
		Dim htmlend As String
		htmlend="</body></html>"
		tb.Text="C"
		tv.Visible=False
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			html=html&index&"<br/>"&row(1).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&row(2).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&"<br />"
		Next
		wv.LoadHtml(htmlhead&html&htmlend)
	End If
End Sub

Sub toggleTableOrTextArea(selected As Boolean,tb As ToggleButton, ta As TextArea,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		tb.Text="C"
		tv.Visible=False
		ta.Text=""
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			ta.Text=ta.Text&index&CRLF&row(1)&CRLF&row(2)&CRLF&CRLF
		Next
	End If
End Sub

Public Sub updateSegmentLabel(current As String,total As String)
	segmentLabel.Text=(current+1)&"/"&total
End Sub

Public Sub getLeft As Double
	'Return MainForm.WindowLeft+mainSplitPane.DividerPositions(0)*mainSplitPane.Width+editorLV.AsView.Left
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(0)-MainForm.WindowLeft
End Sub

Public Sub getTop As Double
	'Return MainForm.WindowTop+(1-rightSplitPane.DividerPositions(0))*rightSplitPane.Height+editorLV.AsView.Top
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(1)-MainForm.WindowTop
End Sub

Public Sub updateSavedTime
	operationLabel.Text="Project saved at "&DateTime.Time(DateTime.Now)
End Sub

Public Sub updateOperation(info As String)
	operationLabel.Text=info
	If info.Contains("generated!") Then
	    TargetFileGeneratingProgress.Done=TargetFileGeneratingProgress.Done+1
		If TargetFileGeneratingProgress.Done=TargetFileGeneratingProgress.Total And TargetFileGeneratingProgress.Done>1 Then
			operationLabel.Text="Generating Completed"
			TargetFileGeneratingProgress.Total=0
			TargetFileGeneratingProgress.Done=0
		End If
	End If
End Sub

Sub checkLV_MouseClicked (EventData As MouseEvent)
	
End Sub

Public Sub addCheckList(matches As List,entry As Int,context As String)
	Try
		TabPane1.SelectedIndex=2
		checkLV.Clear
		Dim match As Map=matches.Get(0)
		Log("match"&match)
		'match.Get("shortMessage")
		'Dim context As Map
		Dim message As String
		message=match.Get("message")
		'context=match.Get("context")
		Dim replacements As List
		replacements=match.Get("replacements")
		Dim offset,length As Int
		offset=match.Get("offset")
		length=match.Get("length")
		Log("offset"&offset)
		Log(context)
		Dim tf As TextFlow
		tf.Initialize
		tf.AddText("message:").SetUnderline(True)
		tf.AddText(" "&message&CRLF)
		tf.AddText("context: "&context.SubString2(0,offset))
		tf.AddText(context.SubString2(offset,offset+length)).SetColor(fx.Colors.Red)
		tf.AddText(context.SubString2(offset+length,context.Length))
		Dim p As Pane=tf.CreateTextFlow
		p.SetSize(checkLV.AsView.Width,Utils.MeasureMultilineTextHeight(fx.DefaultFont(15),checkLV.AsView.Width,tf.getText))
		Dim tagList As List
		tagList.Initialize
		tagList.Add(matches)
		tagList.Add(entry)
		checkLV.Add(p,tagList)
		For Each replace As Map In replacements
			Dim replacement As String
			replacement=replace.Get("value")
			Dim values As List
			values.Initialize
			values.Add(offset)
			values.Add(length)
			values.Add(replacement)
			values.Add(entry)
			values.Add(matches)
			checkLV.AddTextItem("replacement: "&replacement,values)
		Next
	Catch
		Log(LastException)
End Try
End Sub

Public Sub getCheckLVSize As Int
	Return checkLV.Size
End Sub

Public Sub checkLVClear
	checkLV.Clear
End Sub

Public Sub noErrors
	checkLV.Clear
	checkLV.AddTextItem("No errors","")
End Sub

Sub checkLV_ItemClick (Index As Int, Value As Object)
	checkLV.Clear
	Try
		If Index=0 Then
			Dim tagList As List
			tagList=Value
			Dim matches As List=tagList.Get(0)
			Dim entry As Int
			entry=tagList.Get(1)
			If matches.Size>1 Then
				matches.RemoveAt(0)
				currentProject.showReplacements(matches,entry)
			End If
		Else
			If Value<>"" Then
				Dim tagList As List
				tagList=Value
				Dim offset,length,entry As Int
				offset=tagList.Get(0)
				length=tagList.Get(1)
				Dim replacement As String
				replacement=tagList.Get(2)
				entry=tagList.Get(3)
				Dim p As Pane
				p=editorLV.Items.Get(entry)
				Dim targetTextArea As TextArea
				targetTextArea=p.GetNode(1)
				targetTextArea.Text=targetTextArea.Text.SubString2(0,offset)&replacement&targetTextArea.Text.SubString2(offset+length,targetTextArea.Text.Length)
				Sleep(0)
				targetTextArea.SetSelection(targetTextArea.Text.Length,targetTextArea.Text.Length)
				targetTextArea.RequestFocus
			End If
		End If
	Catch
		Log(LastException)
	End Try

End Sub


Sub addPositionChangedEvent(divider As Object,eventName As String)
	Dim Obj As Reflector
	Obj.Target = divider
	Obj.AddChangeListener(eventName, "positionProperty")
End Sub

Sub dividerPosition_changed(old As Object, new As Object)
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub lbl_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		Dim lbl As Label
		lbl=Sender
		Log(lbl.Text)
		Select lbl.Text
		
			Case "Project Files"

			Case "Translation Memory"
				Dim tmm As TMManager
				tmm.Initialize
				tmm.Show
			Case "Terminology"
				Dim termm As TermManager
				termm.Initialize
				termm.show
			Case "Preview"
				If pre.IsInitialized=False Then
					pre.Initialize
				End If
				If pre.isShowing=False Then
					pre.Show
				End If
			Case "Statistics"
				Dim st As statistics
				st.Initialize
				st.Show
		End Select
	End If
End Sub


Public Sub setLabelFont(lbl As Label,name As String)
	If preferencesMap.ContainsKey(name) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(name)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		lbl.Font=fx.CreateFont(familyName,size,False,False)
	Else
		lbl.Font=fx.DefaultFont(16)
	End If
	Log(lbl.font.Size)
End Sub

Public Sub setTextAreaFont(ta As TextArea,name As String)
	If preferencesMap.ContainsKey(name) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(name)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		ta.Style = $"-fx-font-family: ${familyName};
		             -fx-font-size: ${size}px;"$
	End If
End Sub

Public Sub addTextAreaToSegmentPane(segmentpane As Pane,source As String)
	Log("add")
	If currentProject.IsInitialized Then
		currentProject.addTextAreaToSegmentPane(segmentpane,source,"")
	End If
End Sub

Public Sub changeAutoSaveInterval(seconds As Int)
	projectAutoSaver.Interval=seconds*1000
End Sub

Public Sub enableAutosaveTimer(enabled As Boolean)
	projectAutoSaver.Enabled=enabled
End Sub


