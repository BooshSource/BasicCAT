AppType=JavaFX
Build1=Default,b4j.example
File1=editor.bjl
File10=right.bjl
File11=searchTableView.bjl
File12=segment.bjl
File13=segmentation_en.conf
File14=segmentation_en_exception.conf
File15=supportedFiles.txt
File16=tableview.bjl
File17=tabpane.bjl
File18=term.bjl
File19=TermManager.bjl
File2=leftProject.bjl
File20=tmList.bjl
File21=TMManager.bjl
File22=TMsegment.bjl
File23=tmSetting.bjl
File24=upperRight.bjl
File3=Log.bjl
File4=lowerRight.bjl
File5=main.bjl
File6=oneterm.bjl
File7=pretranslate.bjl
File8=preTranslateProgress.bjl
File9=projectSetting.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library10=jb4xencryption
Library11=jokhttputils2
Library12=jshell
Library13=jreflection
Library2=jfx
Library3=javaobject
Library4=cssutils
Library5=json
Library6=apachestringutilsb4j
Library7=jxui
Library8=jsql
Library9=jrandomaccessfile
Module1=FileChooserUtils
Module10=preTranslateDialog
Module11=TMManager
Module12=TermManager
Module13=Utils
Module14=preTrasnlateProgressDialog
Module2=Project
Module3=segmentation
Module4=CustomListView
Module5=txtFilter
Module6=TM
Module7=Term
Module8=KeyValueStore
Module9=ProjectSettings
NumberOfFiles=24
NumberOfLibraries=13
NumberOfModules=14
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

'#AdditionalJar: sqlite-jdbc-3.7.2
#AdditionalJar: sqlite-jdbc-3.23.1
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: fuzzywuzzy-1.1.10

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private mainSplitPane As SplitPane
	Private upperRightSplitPane As SplitPane
	Private rightSplitPane As SplitPane
	Public editorLV As CustomListView
	Public projectTreeTableView As TreeTableView
	Public currentProject As Project
	Private lowerRightSplitPane As SplitPane
	Private TabPane1 As TabPane
	Private LogWebView As WebView
	Public tmTableView As TableView
	Private searchTableView As TableView
	Private addTermButton As Button
	Public sourceTermTextField As TextField
	Public targetTermTextField1 As TextField
	Public termLV As ListView
	Public calculatedHeight As Map
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	init
	Log(GetSystemProperty("os.name","windows"))
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	adjustDividerPositions
	calculatedHeight.Clear
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	If currentProject.IsInitialized Then
		If currentProject.sh.IsInitialized Then
			currentProject.sh.KillProcess
		End If
	End If
End Sub

Sub init
	mainSplitPane.LoadLayout("leftProject")
	mainSplitPane.LoadLayout("right")

	rightSplitPane.LoadLayout("upperRight")
	rightSplitPane.LoadLayout("lowerRight")
	
	upperRightSplitPane.LoadLayout("editor")
	upperRightSplitPane.LoadLayout("term")
	
	lowerRightSplitPane.LoadLayout("Log")
	lowerRightSplitPane.LoadLayout("tabpane")
	TabPane1.LoadLayout("tableview", "TM Match")
	TabPane1.LoadLayout("searchTableView", "Segment Search")
	calculatedHeight.Initialize
	adjustDividerPositions
End Sub

Sub adjustDividerPositions
	mainSplitPane.DividerPositions=Array As Double(0.2)
	rightSplitPane.DividerPositions=Array As Double(0.8)
	
	lowerRightSplitPane.DividerPositions=Array As Double(0.2)
	upperRightSplitPane.DividerPositions=Array As Double(0.8)
End Sub

Public Sub addProjectTreeTableItem
	For Each item As String In Array As String("Project Files","Translation Memory","Terminology")
		Dim lbl As Label
		lbl.Initialize("lbl")
		lbl.Text=item
		If item="Project Files" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Add File","addFileMi")
			cm.MenuItems.Add(mi)
			lbl.ContextMenu=cm
		End If
		Dim tti As TreeTableItem
		tti.Initialize("tti",Array As Object(lbl))
		
		projectTreeTableView.Root.Children.Add(tti)
	Next
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Select mi.Text
		Case "_Open"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("project files",Array As String("*.json"))
			Dim path As String
			path=fc.ShowOpen(MainForm)
			If path="" Then
				Return
			End If
			currentProject.Initialize
			currentProject.open(path)
			MainForm.Title=getProjectname(path)
		Case "EN to ZH Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
			    Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("EN","ZH")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
		Case "ZH to EN Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("ZH","EN")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
		Case "_Save"
			If currentProject.path="" Then
				If currentProject.IsInitialized=False Then
					Return
				End If
				Dim fc As FileChooser
				fc.Initialize
				fc.Title="Please enter the folder name to store the project."
				Dim path As String
				path=fc.ShowSave(MainForm)
				If path="" Then
					Return
				End If
				If File.Exists(path,"") Then
					fx.Msgbox(MainForm,"There has already been a file.","")
					Return
				End If
				currentProject.path=path
				currentProject.save
				MainForm.Title=path
			Else
				currentProject.save
			End If
		Case "_Generate target files"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateTargetFiles
		Case "_Close"
			Log("closing")
			If currentProject.IsInitialized Then
				If currentProject.sh.IsInitialized Then
					currentProject.sh.KillProcess
				End If
				currentProject.projectTM.close
				Dim currentProject As Project
				tmTableView.ClearSelection
				tmTableView.Items.Clear
				projectTreeTableView.ClearSelection
				projectTreeTableView.Root.Children.Clear
				editorLV.Clear
			End If
		Case "Project Settings"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ps As ProjectSettings
			ps.Initialize
			currentProject.saveSettings(ps.ShowAndWait)
		Case "Pre-translate"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ptDialog As preTranslateDialog
			ptDialog.Initialize
			currentProject.preTranslate(ptDialog.ShowAndWait)
		Case "_Exit"
			'Dim currentProject as Project
			If currentProject.IsInitialized Then
				currentProject.projectTM.close
				If currentProject.sh.IsInitialized Then
					currentProject.sh.KillProcess
				End If
			End If
			
			ExitApplication
		Case "_About"
			fx.Msgbox(MainForm,"BasicCAT 1.0"&CRLF&"@xulihang 2018","BasicCAT")
	End Select
End Sub

Sub addFileMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Dim fc As FileChooser
	fc.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	Dim descriptionList,filterList As List
	descriptionList.Initialize
	filterList.Initialize
	For Each filetype As String In supportedFiles
		descriptionList.Add(Regex.Split("	",filetype)(0))
		filterList.add(Regex.Split("	",filetype)(1))
	Next
	FileChooserUtils.AddExtensionFilters4(fc,descriptionList,filterList,False,"",True)
	Dim path As String
	path=fc.ShowOpen(MainForm)
	Log(path)
	Log(getFilename(path))
	If path="" Then
		Return
	else if File.Exists(File.Combine(currentProject.path,"source"),getFilename(path)) Then
		fx.Msgbox(MainForm,"A file with the same name already exists.","")
		Return
	End If
	currentProject.addFile(path)
	Log(path)
End Sub

Sub projectTreeTableView_SelectedItemChanged (SelectedItem As TreeTableItem)
	If SelectedItem<>Null And SelectedItem.IsInitialized Then
		Dim lbl As Label
		lbl=SelectedItem.GetValue(0)
		Log(lbl.Text)
		Select lbl.Text
			
			Case "Project Files"

			Case "Translation Memory"
                projectTreeTableView.ClearSelection
				Dim tmm As TMManager
				tmm.Initialize
				tmm.ShowAndWait
			Case "Terminology"
				projectTreeTableView.ClearSelection
				Dim termm As TermManager
				termm.Initialize
				termm.ShowAndWait
		End Select
	End If
End Sub

Public Sub getFilename(path As String) As String
	Dim filename As String
	
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		filename=path.SubString2(path.LastIndexOf("\")+1,path.Length)
	Else
		filename=path.SubString2(path.LastIndexOf("/")+1,path.Length)
	End If
	Log(filename)
	Return filename
End Sub

Public Sub getProjectname(path As String) As String
	Dim Projectname As String
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		Projectname=path.SubString2(path.LastIndexOf("\"),path.Length)
		Projectname=path.Replace(Projectname,"")
	Else
		Projectname=path.SubString2(path.LastIndexOf("/"),path.Length)
		Projectname=path.Replace(Projectname,"")
		Log(LastException)
	End If
	Log(Projectname)
	Return Projectname
End Sub

Sub ListViewParent_Resize
	Dim clv As CustomListView
	clv=editorLV
	If clv.Size=0 Then
		Return
	End If
	Dim itemWidth As Double = clv.AsView.Parent.Width
	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, editorLV.FirstVisibleIndex - ExtraSize) To Min(editorLV.LastVisibleIndex + ExtraSize,editorLV.Size - 1)
	'For i =  clv.FirstVisibleIndex To clv.LastVisibleIndex
		Dim p As Pane
		p=clv.GetPanel(i)
		If p.NumberOfNodes=0 Then
			Continue
		End If
		
		Dim sourceTa As TextArea = p.GetNode(0)
		Dim targetTa As TextArea = p.GetNode(1)
		If calculatedHeight.ContainsKey(sourceTa.Text&"	"&targetTa.Text)=False Then
			Dim sourcelbl,targetlbl As Label
			sourcelbl.Initialize("")
			sourcelbl.Font = fx.CreateFont("Tahoma",16,False,False)
			p.AddNode(sourcelbl,0, 0, itemWidth/2, -1)
			targetlbl.Initialize("")
			targetlbl.Font = fx.CreateFont("Tahoma",16,False,False)
			p.AddNode(targetlbl, 0, 0, itemWidth/2, -1)

			sourcelbl.Text = sourceTa.Text&CRLF&"12345"
			sourcelbl.WrapText = True
			targetlbl.Text = targetTa.Text&CRLF&"12345"
			targetlbl.WrapText = True
			Dim jo As JavaObject = p
			'force the label to refresh its layout.
			jo.RunMethod("applyCss", Null)
			jo.RunMethod("layout", Null)
			Dim h As Int = Max(Max(30, sourcelbl.Height + 20), targetlbl.Height + 20)
			calculatedHeight.Put(sourceTa.Text&"	"&targetTa.Text,h)
			setLayout(p,i,h)
			sourcelbl.RemoveNodeFromParent
			targetlbl.RemoveNodeFromParent
		Else
			Dim h As Int =calculatedHeight.get(sourceTa.Text&"	"&targetTa.Text)
			setLayout(p,i,h)
		End If
	Next
End Sub

Public Sub setLayout(p As Pane,index As Int,h As Int)
	Dim itemwidth As Double
	itemwidth=editorLV.AsView.Width
	p.Left=0
	p.SetSize(itemwidth,h+10dip)
	Dim sourceTa As TextArea = p.GetNode(0)
	Dim targetTa As TextArea = p.GetNode(1)
	sourceTa.Left=5dip
	sourceTa.SetSize(itemwidth/2-15dip,h+5dip)
	targetTa.Left=sourceTa.Left+sourceTa.Width
	targetTa.SetSize(itemwidth/2-15dip,h+5dip)
	editorLV.ResizeItem(index,h+10dip)
End Sub

Sub editorLV_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	If editorLV.Size=0 Then
		Return
	End If
	currentProject.fillPane(FirstIndex,LastIndex)
	CallSubDelayed(Me,"ListViewParent_Resize")
	currentProject.saveAlltheTranslation(FirstIndex,LastIndex)
End Sub


Sub TabPane1_TabChanged (SelectedTab As TabPage)
	
End Sub


Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If tmTableView.SelectedRowValues<>Null And editorLV.Size<>0 Then
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		Dim targetTextArea As TextArea
		targetTextArea=pane.GetNode(1)
		targetTextArea.Text=tmTableView.SelectedRowValues(2)
	End If
End Sub

Sub addTermButton_MouseClicked (EventData As MouseEvent)
	If currentProject.IsInitialized Then
		currentProject.projectTerm.addTerm(sourceTermTextField.Text,targetTermTextField1.Text)
	End If
End Sub

Sub termLV_MouseClicked (EventData As MouseEvent)
	If termLV.SelectedItem<>Null Then
		Dim p As Pane
		p=termLV.SelectedItem
		Dim lbl As Label
		lbl=p.GetNode(1)
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		Dim targetTextArea As TextArea
		targetTextArea=pane.GetNode(1)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionStart)&lbl.Text&targetTextArea.Text.SubString2(targetTextArea.SelectionStart,targetTextArea.Text.Length)
	End If
End Sub