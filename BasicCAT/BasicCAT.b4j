AppType=JavaFX
Build1=Default,org.xulihang.basiccat
File1=.gitignore
File10=FontPicker.bjl
File11=Fonts.xml
File12=generalProjectSetting.bjl
File13=generalSetting.bjl
File14=inputbox.bjl
File15=inputTextArea.bjl
File16=lang.conf
File17=languageChooser.bjl
File18=leftProject.bjl
File19=Log.bjl
File2=appearance.bjl
File20=lowerRight.bjl
File21=main.bjl
File22=menuText.txt
File23=mtparamfiller.bjl
File24=mtSetting.bjl
File25=oneterm.bjl
File26=pdf2txt.bjl
File27=pluginsSetting.bjl
File28=preferences.bjl
File29=preferences.conf
File3=autocomplete.bjl
File30=pretranslate.bjl
File31=preview.bjl
File32=progress.bjl
File33=projectSetting.bjl
File34=quickfillSetting.bjl
File35=right.bjl
File36=searchandreplace.bjl
File37=searchTableView.bjl
File38=SearchView.bjl
File39=segment.bjl
File4=checkList.bjl
File40=segmentation_en.conf
File41=segmentation_en_exception.conf
File42=segmentation_en_idml.conf
File43=segmentation_zh.conf
File44=segmentation_zh_exception.conf
File45=serverLanucher.bjl
File46=settingLanguagecheck.bjl
File47=settingVersionControl.bjl
File48=statistics.bjl
File49=supportedFiles.txt
File5=confirmReview.bjl
File50=tableview.bjl
File51=tabpane.bjl
File52=term.bjl
File53=TermEditor.bjl
File54=TermManager.bjl
File55=termSetting.bjl
File56=TMEditor.bjl
File57=tmList.bjl
File58=TMManager.bjl
File59=TMsegment.bjl
File6=default_rules.srx
File60=tmSetting.bjl
File61=upperRight.bjl
File62=viewSegment.bjl
File63=wordLookupSetting.bjl
File7=dictList.txt
File8=dictWebview.bjl
File9=editor.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup51=Default Group
FileGroup52=Default Group
FileGroup53=Default Group
FileGroup54=Default Group
FileGroup55=Default Group
FileGroup56=Default Group
FileGroup57=Default Group
FileGroup58=Default Group
FileGroup59=Default Group
FileGroup6=Default Group
FileGroup60=Default Group
FileGroup61=Default Group
FileGroup62=Default Group
FileGroup63=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=jcore
Library10=jb4xencryption
Library11=jshell
Library12=jreflection
Library13=encryption
Library14=byteconverter
Library15=jstringutils
Library16=jawtrobot
Library17=jxmlsax
Library18=xmlbuilder
Library19=okhttp
Library2=jfx
Library20=jsd_ziplibray
Library21=abplugin
Library22=jokhttputils2
Library23=cssutils
Library3=javaobject
Library4=archiver
Library5=json
Library6=apachestringutilsb4j
Library7=jxui
Library8=jsql
Library9=jrandomaccessfile
Module1=FileChooserUtils
Module10=preTranslateDialog
Module11=Utils
Module12=languageChooser
Module13=LanguageTool
Module14=ITP
Module15=idmlFilter
Module16=Preferences
Module17=icu4j
Module18=dictWebView
Module19=MT
Module2=Project
Module20=xliffFilter
Module21=SRX
Module22=POIWord
Module23=confirmReviewDialog
Module24=InputTextAreaBox
Module25=progressDialog
Module26=TMManager
Module27=SearchView
Module28=TMEditor
Module29=TextFlow
Module3=segmentation
Module30=TermManager
Module31=TermEditor
Module32=TMX
Module33=TBX
Module34=searchAndReplaceDialog
Module35=MTParamsFiller
Module36=opennlp
Module37=serverLauncher
Module38=PDF2TXT
Module39=pdfbox
Module4=CustomListView
Module40=Previewer
Module41=FontPicker
Module42=InputBox
Module43=Xml2Map
Module44=statistics
Module45=Map2Xml
Module46=git
Module47=zip4j
Module48=idmlUtils
Module49=coordinate
Module5=txtFilter
Module50=editDistance
Module51=viewSegment
Module6=TM
Module7=Term
Module8=KeyValueStore
Module9=ProjectSettings
NumberOfFiles=63
NumberOfLibraries=23
NumberOfModules=51
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region


#AdditionalJar: sqlite-jdbc-3.23.1
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: fuzzywuzzy-1.1.10
#AdditionalJar: zip4j-1.3.2
#AdditionalJar: opennlp-tools-1.9.0
#AdditionalJar: icu4j

'-------- for jgit
#AdditionalJar: org.eclipse.jgit-5.1.1.201809181055-r
#AdditionalJar: jsch-0.1.54
#AdditionalJar: jzlib-1.1.1
#AdditionalJar: JavaEWAH-1.1.6
#AdditionalJar: slf4j-api-1.7.2
#AdditionalJar: slf4j-simple-1.7.25

'-------- for Apache POI
#AdditionalJar: poi-4.0.0
#AdditionalJar: poi-ooxml-schemas-4.0.0
#AdditionalJar: poi-ooxml-4.0.0
#AdditionalJar: xmlbeans-3.0.1
#AdditionalJar: commons-collections4-4.2
#AdditionalJar: commons-compress-1.18

'-------- for pdfbox
#AdditionalJar: pdfbox-2.0.12
#AdditionalJar: fontbox-2.0.12
#AdditionalJar: commons-logging-1.2

Sub Process_Globals
	Private fx As JFX
	Public MainForm As Form
	Private mainSplitPane As SplitPane
	Private upperRightSplitPane As SplitPane
	Private rightSplitPane As SplitPane
	Public editorLV As CustomListView
	Public projectTreeTableView As TreeTableView
	Public currentProject As Project
	Private lowerRightSplitPane As SplitPane
	Public TabPane1 As TabPane
	Public LogWebView As WebView
	Public tmTableView As TableView
	Public searchTableView As TableView
	Private addTermButton As Button
	Public sourceTermTextField As TextField
	Public targetTermTextField1 As TextField
	Public termLV As ListView
	Public calculatedHeight As Map
	Public preferencesMap As Map
	Private contextWebView As WebView
	Private segmentSearchToggleButton As ToggleButton
	Private TMViewToggleButton As ToggleButton
	Private viewTMTextArea As TextArea
	Private segmentLabel As Label
	Private MenuBar1 As MenuBar
	Public pre As Previewer
    Private autosaveTimer As Timer
	
	Private operationLabel As Label
	Private checkLV As CustomListView
	Public nlp As opennlp
	Public plugin As ABPlugin
	Private dw As dictWebView

End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show

	init
	Log(fx.Screens)
	Log(GetSystemProperty("os.name","windows"))
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub MainForm_Resize (Width As Double, Height As Double)
	adjustDividerPositions
	calculatedHeight.Clear

	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	If currentProject.IsInitialized Then
		If currentProject.contentChanged Then
			Dim result As Int
			result=fx.Msgbox2(MainForm,"Project is changed, save before exit?","","Yes","Cancel","Exit without saving",fx.MSGBOX_CONFIRMATION)
			Select result
				'yes -1, no -2, cancel -3
				Case -1
					currentProject.save
				Case -3
					EventData.Consume
			End Select
		End If
	End If
End Sub

Sub init

	mainSplitPane.LoadLayout("leftProject")
	mainSplitPane.LoadLayout("right")

	rightSplitPane.LoadLayout("upperRight")
	rightSplitPane.LoadLayout("lowerRight")
	
	upperRightSplitPane.LoadLayout("editor")
	upperRightSplitPane.LoadLayout("term")
	
	Dim jo As JavaObject
	jo=upperRightSplitPane
	addPositionChangedEvent(jo.RunMethodJO("getDividers",Null).RunMethodJO("get",Array(0)),"dividerPosition")
	
	lowerRightSplitPane.LoadLayout("Log")
	lowerRightSplitPane.LoadLayout("tabpane")
	TabPane1.LoadLayout("tableview", "TM Match")
	TabPane1.LoadLayout("searchTableView", "Segment Search")
	TabPane1.LoadLayout("checkList", "LanguageCheck")
	calculatedHeight.Initialize
	adjustDividerPositions
	preferencesMap.Initialize

	If File.Exists(File.DirData("BasicCAT"),"preferences.conf")=False Then
		File.Copy(File.DirAssets,"preferences.conf",File.DirData("BasicCAT"),"preferences.conf")
	End If
	Dim json As JSONParser
	json.Initialize(File.ReadString(File.DirData("BasicCAT"),"preferences.conf"))
	preferencesMap=json.NextObject
	
	tmTableView.SetColumnWidth(1,200)
	tmTableView.SetColumnWidth(2,200)
	Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
	Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	If preferencesMap.ContainsKey("autosaveInterval") Then
		Dim mseconds As Int
		mseconds=preferencesMap.Get("autosaveInterval")*1000
		autosaveTimer.Initialize("autosaveTimer",mseconds)
	Else
		autosaveTimer.Initialize("autosaveTimer",60000)
	End If
	autosaveTimer.Enabled=False
	loadPlugins
End Sub

Public Sub initializeNLP(sourcelang As String)
	Try
		nlp.Initialize(sourcelang)
	Catch
		Log(LastException)
	End Try
End Sub


Public Sub loadPlugins
	Dim dir As String
	If preferencesMap.ContainsKey("pluginDir") Then
		dir=preferencesMap.Get("pluginDir")
	Else
		dir=File.Combine(File.DirApp,"plugins")
	End If
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

Sub adjustDividerPositions
	mainSplitPane.DividerPositions=Array As Double(0.2)
	rightSplitPane.DividerPositions=Array As Double(0.8)
	
	lowerRightSplitPane.DividerPositions=Array As Double(0.2)
	upperRightSplitPane.DividerPositions=Array As Double(0.8)
End Sub

Public Sub addProjectTreeTableItem
	For Each item As String In Array As String("Project Files","Translation Memory","Terminology","Statistics","Preview")
		Dim lbl As Label
		lbl.Initialize("lbl")
		lbl.Text=item
		If item="Project Files" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Add File","addFileMi")
			cm.MenuItems.Add(mi)
			lbl.ContextMenu=cm
		End If
		If item="Translation Memory" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Export to TMX","exportTMXMi")
			cm.MenuItems.Add(mi)
			lbl.ContextMenu=cm
		End If
		If item="Terminology" Then
			Dim cm As ContextMenu
			cm.Initialize("cm")
			Dim mi As MenuItem
			mi.Initialize("Export to TXT","exportTermToTXTMi")
			cm.MenuItems.Add(mi)
			lbl.ContextMenu=cm
		End If
		Dim tti As TreeTableItem
		tti.Initialize("tti",Array As Object(lbl))
		
		projectTreeTableView.Root.Children.Add(tti)
	Next
End Sub

Sub MenuBar1_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Select mi.Text
		Case "_Open"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("project files",Array As String("*.bcp"))
			Dim path As String
			path=fc.ShowOpen(MainForm)
			If path="" Then
				Return
			End If
			currentProject.Initialize
			currentProject.open(path)
			autosaveTimer.Enabled=True
			MainForm.Title=getProjectname(path)
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
			Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
		Case "en to zh Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
			    Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("en","zh")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Case "zh to en Project"
			If currentProject.IsInitialized Then
				fx.Msgbox(MainForm,"Please close the current project first.","")
				Return
			End If
			currentProject.Initialize
			currentProject.newProjectSetting("zh","en")
			MainForm.Title="Untitled-1"
			addProjectTreeTableItem
			Utils.enableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Case "_Save"
			If currentProject.IsInitialized=False Then
				Return
			End If
			autosaveTimer.Enabled=True
			If currentProject.path="" Then
				Dim fc As FileChooser
				fc.Initialize
				fc.Title="Please enter the folder name to store the project."
				Dim path As String
				path=fc.ShowSave(MainForm)
				If path="" Then
					Return
				End If
				If File.Exists(path,"") Then
					fx.Msgbox(MainForm,"There has already been a file.","")
					Return
				End If
				currentProject.path=path
				currentProject.save
				MainForm.Title=path
				Utils.enableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
			Else
				currentProject.save
			End If
		Case "_Generate target files"
			If currentProject.IsInitialized=False Then
				Return
			End If
			currentProject.generateTargetFiles
		Case "_Close"
			Log("closing")
			closeProject
		Case "Go to the next untranslated segment"
			For i=currentProject.lastEntry To editorLV.Size-1
				Dim p As Pane
				p=editorLV.GetPanel(i)
				If p.NumberOfNodes=0 Then
					Return
				End If
				If Utils.getTextFromPane(1,p)="" Then
					editorLV.JumpToItem(i)
					Return
				End If
			Next
		Case "Fill with the first matched TM"
			fillWithTM
		Case "Fill with the next tag"
			fillWithTheNextTag
		Case "Search and Replace"
			Dim sap As searchAndReplaceDialog
			sap.Initialize
			sap.show
		Case "Show quickfill dropdown"
			showQuickfillDropdown
		Case "Show online dictionary dropdown"

			showDictDropdown
		Case "Show/Edit notes of the current segmnet"
			If currentProject.segments.Size<>0 Then
				Dim inp As InputTextAreaBox
				inp.Initialize
				inp.showAndWait
			End If
		Case "Mark the current segment as non-translatable"
			changeTranslatable("no")
		Case "Mark the current segment as translatable"
			changeTranslatable("yes")
		Case "Project Settings"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			Dim ps As ProjectSettings
			ps.Initialize
			Dim resultList As List
			resultList=ps.ShowAndWait
			If resultList.Get(0)<>"canceled" Then
				currentProject.saveSettings(resultList.Get(1))
			End If
			
		Case "Pre-translate"
			If currentProject.IsInitialized=False Then
				fx.Msgbox(MainForm,"Please open a project first.","")
				Return
			End If
			If editorLV.Size=0 Then
				fx.Msgbox(MainForm,"Please open a file first.","")
				Return
			End If
			Dim ptDialog As preTranslateDialog
			ptDialog.Initialize
			currentProject.preTranslate(ptDialog.ShowAndWait)
		Case "_Exit"
			'Dim currentProject as Project
			If currentProject.IsInitialized Then
				If currentProject.projectTM.IsInitialized Then
					currentProject.projectTM.close
					Sleep(0)
				End If
			End If
			

			ExitApplication
		Case "Preferences"
			Dim pref As Preferences
			pref.Initialize
			pref.ShowAndWait
		Case "PDF2TXT"
			Dim p2t As PDF2TXT
			p2t.Initialize
			p2t.Show
		Case "Server Launcher"
			Dim sl As serverLauncher
			sl.Initialize
			sl.show
		Case "_About"
			fx.Msgbox(MainForm,"BasicCAT 1.0"&CRLF&"@xulihang 2018","BasicCAT")
	End Select
End Sub

Sub fillWithTheNextTag
	If editorLV.Size=0 Then
		Return
	End If
	Dim p As Pane
	p=editorLV.GetPanel(currentProject.lastEntry)
	If p.NumberOfNodes=0 Then
		Return
	End If

	Dim sourceTextArea As TextArea=p.GetNode(0)
	Dim targetTextArea As TextArea=p.GetNode(1)
	
	Dim tagsInSource As List
	tagsInSource.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",sourceTextArea.Text)
	Do While tagMatcher.Find
		tagsInSource.Add(tagMatcher.Match)
	Loop
	
	Dim tagsInTarget As List
	tagsInTarget.Initialize
	Dim tagMatcher As Matcher=Regex.Matcher("<.*?>",targetTextArea.Text)
	Do While tagMatcher.Find
		tagsInTarget.Add(tagMatcher.Match)
	Loop
	
	For Each tag As String In tagsInTarget
		tagsInSource.RemoveAt(tagsInSource.IndexOf(tag))
	Next
	If tagsInSource.Size<>0 Then
		Dim selectionEnd As Int=targetTextArea.selectionEnd
		Dim tag As String=tagsInSource.Get(0)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionEnd)&tag&targetTextArea.Text.SubString2(targetTextArea.SelectionEnd,targetTextArea.Text.Length)
		targetTextArea.SetSelection(selectionEnd+tag.Length,selectionEnd+tag.Length)
	End If
End Sub

Sub showQuickfillDropdown
	If editorLV.Size=0 Then
		Return
	End If

	
	Dim p As Pane
	p=editorLV.GetPanel(currentProject.lastEntry)
	If p.NumberOfNodes=0 Then
		Return
	End If
	Dim ta As TextArea=p.GetNode(1)
	Dim cm As ContextMenu
	cm.Initialize("")
	Dim quickfillList As List
	quickfillList.Initialize
	If currentProject.settings.ContainsKey("quickfill_includeterm") Then
		If currentProject.settings.Get("quickfill_includeterm")=True Then
			For Each termPane As Pane In termLV.Items
				quickfillList.Add(termPane.Tag)
			Next
		End If
	End If
	If currentProject.settings.ContainsKey("quickfill") Then
		quickfillList.AddAll(currentProject.settings.Get("quickfill"))
	Else
		quickfillList.AddAll(Array As String("——","¥","©","®","™","『","』"))
	End If
	
	For Each item As String In quickfillList
		If item="" Then 
			Continue
		End If
		Log(item)
		Dim mi As MenuItem
		mi.Initialize(item,"quickFillMi")
		mi.Tag=item
		cm.MenuItems.Add(mi)
	Next
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub quickFillMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	Log(mi.Tag)
	Dim p As Pane
	p=editorLV.GetPanel(currentProject.lastEntry)
	If p.NumberOfNodes=0 Then
		Return
	End If
	Dim ta As TextArea=p.GetNode(1)
	Dim selectionEnd As Int=ta.selectionEnd
	ta.Text=ta.Text.SubString2(0,ta.SelectionEnd)&mi.Text&ta.Text.SubString2(ta.SelectionEnd,ta.Text.Length)
	ta.SetSelection(selectionEnd+mi.Text.Length,selectionEnd+mi.Text.Length)
End Sub

Sub showDictDropdown
	If editorLV.Size=0 Then
		Return
	End If
	Dim p As Pane
	p=editorLV.GetPanel(currentProject.lastEntry)
	If p.NumberOfNodes=0 Then
		Return
	End If
	Dim ta As TextArea=p.GetNode(0)
	Dim selected As String
	selected=ta.Text.SubString2(ta.SelectionStart,ta.SelectionEnd)
	If selected="" Then
		Return
	End If
	Dim cm As ContextMenu
	cm.Initialize("cm")
	Dim dictMap As Map
    dictMap.Initialize
	For Each line As String In File.ReadList(File.DirAssets,"dictList.txt")
		dictMap.Put(Regex.Split("	",line)(0),Regex.Split("	",line)(1))
	Next
	
	For Each dictName As String In dictMap.Keys
		Dim mi As MenuItem
		mi.Initialize(dictName, "dictLookupMi")
        Dim url As String
		url=dictMap.Get(dictName)
		url=url.Replace("*",selected)
		mi.Tag=url
		cm.MenuItems.Add(mi)
	Next
	Sleep(100)

	Dim map1 As Map
	map1=Utils.GetScreenPosition(ta)
	Log(map1)
	Dim jo As JavaObject = cm
	jo.RunMethod("show", Array(ta, map1.Get("x")+ta.Width/10, map1.Get("y")+ta.Height))
End Sub

Sub dictLookupMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(Sender)

	If dw.IsInitialized=False Then
		dw.Initialize
	End If
	dw.show
	dw.loadUrl(mi.Tag)
	
End Sub

Sub changeTranslatable(isTranslatable As String)
	If currentProject.segments.Size<>0 Then
		Dim segment As List
		segment=currentProject.segments.Get(currentProject.lastEntry)
		Dim extra As Map
		extra=segment.Get(4)
		extra.Put("translate",isTranslatable)
		Dim p As Pane
		p=editorLV.GetPanel(currentProject.lastEntry)
		Dim sourceTa As TextArea=p.GetNode(0)
		Dim targetTa As TextArea=p.GetNode(1)
		Select isTranslatable
			Case "yes"
				sourceTa.Enabled=True
				targetTa.Enabled=True
			Case "no"
				sourceTa.Enabled=False
				targetTa.Enabled=False
		End Select
		currentProject.contentIsChanged
	End If
End Sub

Sub exportTermToTXTMi_Action
	If currentProject.projectTerm.IsInitialized Then
		Dim path As String
		Dim fc As FileChooser
		fc.Initialize
		fc.SetExtensionFilter("txt",Array As String("*.txt"))
		path=fc.ShowSave(MainForm)
		If path="" Then
			Return
		End If
		Dim segments As List
		segments.Initialize
		Dim termKVS As KeyValueStore
		termKVS=currentProject.projectTerm.terminology
		For Each key As String In termKVS.ListKeys
			Dim bitext As List
			bitext.Initialize
			bitext.Add(key)
			Dim targetMap As Map
			targetMap=termKVS.Get(key)
			bitext.Add(targetMap.GetKeyAt(0))
			Dim terminfo As Map
			terminfo=targetMap.Get(targetMap.GetKeyAt(0))
			If terminfo.ContainsKey("note") Then
				bitext.Add(terminfo.Get("note"))
			Else
				bitext.Add("")
			End If
			segments.Add(bitext)
		Next
		currentProject.projectTerm.exportToTXT(segments,path)
		fx.Msgbox(MainForm,"exported","")
	End If
End Sub

Sub exportTMXMi_Action
	If currentProject.projectTM.IsInitialized Then
		Dim path As String
		Dim fc As FileChooser
		fc.Initialize
		fc.SetExtensionFilter("tmx",Array As String("*.tmx"))
		path=fc.ShowSave(MainForm)
		If path="" Then
			Return
		End If
		Dim segments As List
		segments.Initialize
		Dim tmKVS As KeyValueStore
		tmKVS=currentProject.projectTM.translationMemory
		For Each key As String In tmKVS.ListKeys
			Dim bitext As List
			bitext.Initialize
			bitext.Add(key)
			bitext.Add(tmKVS.Get(key))
			segments.Add(bitext)
		Next
		TMX.export(segments,currentProject.projectFile.Get("source"),currentProject.projectFile.Get("target"),path)
		fx.Msgbox(MainForm,"exported","")
	End If
End Sub

Sub addFileMi_Action
	Dim mi As MenuItem
	mi=Sender
	Log(mi.Text)
	If currentProject.IsInitialized=False Then
		fx.Msgbox(MainForm,"Please first open a project.","")
		Return
	End If
	If currentProject.path="" Then
		fx.Msgbox(MainForm,"Please first save the project.","")
		Return
	End If
	Dim fc As FileChooser
	fc.Initialize
	Dim supportedFiles As List
	supportedFiles=File.ReadList(File.DirAssets,"supportedFiles.txt")
	Dim descriptionList,filterList As List
	descriptionList.Initialize
	filterList.Initialize
	For Each filetype As String In supportedFiles
		descriptionList.Add(Regex.Split("	",filetype)(0))
		filterList.add(Regex.Split("	",filetype)(1))
	Next
	FileChooserUtils.AddExtensionFilters4(fc,descriptionList,filterList,True,"All",True)
	Dim path As String
	path=fc.ShowOpen(MainForm)
	Log(path)
	Log(getFilename(path))
	If path="" Then
		Return
	else if File.Exists(File.Combine(currentProject.path,"source"),getFilename(path)) Then
		fx.Msgbox(MainForm,"A file with the same name already exists.","")
		Return
	End If
	currentProject.addFile(path)
	Log(path)
End Sub

Public Sub getFilename(path As String) As String
	Dim filename As String
	
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		filename=path.SubString2(path.LastIndexOf("\")+1,path.Length)
	Else
		filename=path.SubString2(path.LastIndexOf("/")+1,path.Length)
	End If
	Log(filename)
	Return filename
End Sub

Public Sub getProjectname(path As String) As String
	Dim Projectname As String
	If GetSystemProperty("os.name","Windows").StartsWith("Windows") Then
		Projectname=path.SubString2(path.LastIndexOf("\"),path.Length)
		Projectname=path.Replace(Projectname,"")
	Else
		Projectname=path.SubString2(path.LastIndexOf("/"),path.Length)
		Projectname=path.Replace(Projectname,"")
		Log(LastException)
	End If
	Log(Projectname)
	Return Projectname
End Sub

Sub ListViewParent_Resize

	Dim clv As CustomListView
	clv=editorLV
	clv.AsView.Width=clv.AsView.Parent.Width
	clv.AsView.Height=clv.AsView.Parent.Height
	If clv.Size=0 Then
		Return
	End If
	Dim itemWidth As Double = clv.AsView.Width
	Dim ExtraSize As Int
	ExtraSize=3
	For i = Max(0, editorLV.FirstVisibleIndex - ExtraSize) To Min(editorLV.LastVisibleIndex + ExtraSize,editorLV.Size - 1)
	'For i =  clv.FirstVisibleIndex To clv.LastVisibleIndex
		Dim p As Pane
		p=clv.GetPanel(i)
		If p.NumberOfNodes=0 Then
			Continue
		End If
		
		Dim sourceTa As TextArea = p.GetNode(0)
		Dim targetTa As TextArea = p.GetNode(1)
		If calculatedHeight.ContainsKey(sourceTa.Text&"	"&targetTa.Text)=False Then
			Dim sourcelbl,targetlbl As Label
			sourcelbl.Initialize("")
			'sourcelbl.Font = fx.CreateFont("Tahoma",16,False,False)
			setLabelFont(sourcelbl,"sourceFont")
			p.AddNode(sourcelbl,0, 0, itemWidth/2-15dip, -1)
			targetlbl.Initialize("")
			'targetlbl.Font = fx.CreateFont("Tahoma",16,False,False)
			setLabelFont(targetlbl,"targetFont")
			p.AddNode(targetlbl, 0, 0, itemWidth/2-15dip, -1)

			sourcelbl.Text = sourceTa.Text&CRLF&"extra"
			sourcelbl.WrapText = True
			targetlbl.Text = targetTa.Text&CRLF&"extra"
			targetlbl.WrapText = True
			Dim jo As JavaObject = p
			'force the label to refresh its layout.
			jo.RunMethod("applyCss", Null)
			jo.RunMethod("layout", Null)
			Dim h As Int = Max(Max(20, sourcelbl.Height + 10), targetlbl.Height + 10)
			calculatedHeight.Put(sourceTa.Text&"	"&targetTa.Text,h)
			setLayout(p,i,h)
			sourcelbl.RemoveNodeFromParent
			targetlbl.RemoveNodeFromParent
		Else
			Dim h As Int =calculatedHeight.get(sourceTa.Text&"	"&targetTa.Text)
			setLayout(p,i,h)
		End If
	Next
End Sub

Public Sub setLayout(p As Pane,index As Int,h As Int)
	Dim itemwidth As Double
	itemwidth=editorLV.AsView.Width
	p.Left=0
	p.SetSize(itemwidth,h+10dip)
	Dim sourceTa As TextArea = p.GetNode(0)
	Dim targetTa As TextArea = p.GetNode(1)
	sourceTa.Left=5dip
	sourceTa.SetSize(itemwidth/2-15dip,h+5dip)
	targetTa.Left=5dip+itemwidth/2-15dip
	targetTa.SetSize(itemwidth/2-15dip,h+5dip)

	editorLV.ResizeItem(index,h+10dip)
End Sub

Sub editorLV_VisibleRangeChanged (FirstIndex As Int, LastIndex As Int)
	If editorLV.Size=0 Then
		Return
	End If
	currentProject.fillPane(FirstIndex,LastIndex)
	CallSubDelayed(Me,"ListViewParent_Resize")
	currentProject.saveAlltheTranslationToSegmentsInVisibleArea(FirstIndex,LastIndex)
End Sub


Sub TabPane1_TabChanged (SelectedTab As TabPage)
    	
End Sub

Sub searchTableView_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		If searchTableView.SelectedRowValues<>Null Then
			Dim index As Int
			index=searchTableView.SelectedRowValues(0)
			Log(index)
			Log(currentProject.segments.Get(index))
			Dim context As String
			'For i=Max(index-5,0) To Min(index+5,currentProject.segments.Size-1)
			'	Dim segment As List
			'	segment=currentProject.segments.Get(i)
			'	context=segment.Get(2)&context
			'Next
			For Each row() As String In searchTableView.Items
				context=context&row(0)&" "&row(1)&CRLF&"  "&row(2)&CRLF&CRLF
			Next
			Dim viewSegmentForm As viewSegment
			viewSegmentForm.Initialize
			viewSegmentForm.show(context)
		End If
	End If
End Sub

Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount=2 Then
		fillWithTM
	End If
End Sub

Sub fillWithTM
	If tmTableView.Items.Size<>0 Then
		Log(tmTableView.SelectedRow)
		If tmTableView.SelectedRow=-1 Then
			tmTableView.SelectedRow=0
		End If
		If tmTableView.SelectedRowValues<>Null And editorLV.Size<>0 Then
			Dim pane As Pane
			pane=editorLV.GetPanel(currentProject.lastEntry)
			Dim targetTextArea As TextArea
			targetTextArea=pane.GetNode(1)
			targetTextArea.Text=tmTableView.SelectedRowValues(2)
			currentProject.contentIsChanged
		End If
	End If

End Sub

Sub addTermButton_MouseClicked (EventData As MouseEvent)
	If currentProject.IsInitialized Then
		currentProject.projectTerm.addTerm(sourceTermTextField.Text,targetTermTextField1.Text)
	End If
End Sub

Sub termLV_MouseClicked (EventData As MouseEvent)
	If termLV.SelectedItem<>Null And EventData.PrimaryButtonPressed Then
		Dim p As Pane
		p=termLV.SelectedItem
		Dim lbl As Label
		lbl=p.GetNode(1)
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		Dim targetTextArea As TextArea
		targetTextArea=pane.GetNode(1)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,targetTextArea.SelectionStart)&lbl.Text&targetTextArea.Text.SubString2(targetTextArea.SelectionStart,targetTextArea.Text.Length)
	End If
End Sub

Sub tmTableView_SelectedRowChanged(Index As Int, Row() As Object)
	If Row<>Null And Row.Length<>0 Then
		Dim pane As Pane
		pane=editorLV.GetPanel(currentProject.lastEntry)
		If pane.NumberOfNodes=0 Then
			Return
		End If
		Dim sourceTextArea As TextArea
		sourceTextArea=pane.GetNode(0)
		If Row(1)="" Then
			LogWebView.LoadHtml(Utils.buildHtmlString(Row(2)))
			Return
		End If
		Dim html As String
		html=editDistance.showDiff(sourceTextArea.Text,Row(1)).Replace("</body>","<p>"&Row(2)&"</p></body>")
		LogWebView.LoadHtml(html)
	End If

End Sub

Sub searchTableView_Action
	Dim mi As MenuItem
	mi=Sender
	Select mi.Text
		Case "Go to the segment"
			If searchTableView.SelectedRowValues<>Null Then
				Dim index As Int
				index=searchTableView.SelectedRowValues(0)
				editorLV.JumpToItem(index)
			End If
	End Select
End Sub

Public Sub closeProject
	autosaveTimer.Enabled=False
	If currentProject.IsInitialized Then
		If currentProject.projectTM.IsInitialized Then
			currentProject.projectTM.close
		End If
		Dim currentProject As Project
		tmTableView.ClearSelection
		tmTableView.Items.Clear
		projectTreeTableView.ClearSelection
		projectTreeTableView.Root.Children.Clear
		editorLV.Clear
		termLV.Items.Clear
		MainForm.Title="BasicCAT"
		Utils.disableMenuItems(MenuBar1,Array As String("_Save","_Close"))
		Utils.disableMenuItems(MenuBar1,File.ReadList(File.DirAssets,"menuText.txt"))
	End If
End Sub


Sub segmentSearchToggleButton_SelectedChange(Selected As Boolean)
	'toggleTableOrTextArea(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
	toggleTableOrWebView(Selected,segmentSearchToggleButton,contextWebView,searchTableView)
End Sub

Sub TMViewToggleButton_SelectedChange(Selected As Boolean)
	toggleTableOrTextArea(Selected,TMViewToggleButton,viewTMTextArea,tmTableView)
End Sub

Public Sub changeWhenSegmentOrSelectionChanges
	If TabPane1.SelectedIndex=1 Then
		If segmentSearchToggleButton.Selected=False Then
			segmentSearchToggleButton_SelectedChange(False)
		End If
	Else
		If TMViewToggleButton.Selected=False Then
			TMViewToggleButton_SelectedChange(False)
		End If
	End If
End Sub


Sub toggleTableOrWebView(selected As Boolean,tb As ToggleButton, wv As WebView,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		Dim html As String
		Dim htmlhead As String
		htmlhead=$"<!DOCTYPE HTML><html><head><meta charset="utf-8" />
		<style type="text/css">
		p {font-size: 18px}
		#selected {color:green;}
		</style></head><body>"$
		Dim htmlend As String
		htmlend="</body></html>"
		tb.Text="C"
		tv.Visible=False
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			html=html&index&"<br/>"&row(1).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&row(2).Replace(searchTableView.Tag,$"<span id="selected">${searchTableView.Tag}</span>"$)&"<br />"&"<br />"
		Next
		wv.LoadHtml(htmlhead&html&htmlend)
	End If
End Sub

Sub toggleTableOrTextArea(selected As Boolean,tb As ToggleButton, ta As TextArea,tv As TableView)
	If selected Then
		tb.Text="L"
		tv.Visible=True
	Else
		tb.Text="C"
		tv.Visible=False
		ta.Text=""
		Dim index As Int=0
		For Each row() As String In tv.Items
			index=index+1
			ta.Text=ta.Text&index&CRLF&row(1)&CRLF&row(2)&CRLF&CRLF
		Next
	End If
End Sub

Public Sub updateSegmentLabel(current As String,total As String)
	segmentLabel.Text=(current+1)&"/"&total
End Sub

Public Sub getLeft As Double
	'Return MainForm.WindowLeft+mainSplitPane.DividerPositions(0)*mainSplitPane.Width+editorLV.AsView.Left
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(0)-MainForm.WindowLeft
End Sub

Public Sub getTop As Double
	'Return MainForm.WindowTop+(1-rightSplitPane.DividerPositions(0))*rightSplitPane.Height+editorLV.AsView.Top
	Dim robot As AWTRobot
	Return robot.RobotMouseCurrentLocation(1)-MainForm.WindowTop
End Sub

Sub autosaveTimer_Tick
	If currentProject.IsInitialized=False Then
		Return
	End If
	If currentProject.path="" Then
		Return
	Else
		createBakupFiles
		currentProject.save
	End If
End Sub

Sub createBakupFiles
	Log(File.Exists(currentProject.path,"bak"))
    If File.Exists(currentProject.path,"bak")=False Then
		File.MakeDir(currentProject.path,"bak")
    End If
	Utils.CopyWorkFolderAsync(File.Combine(currentProject.path, "work"),File.Combine(currentProject.path, "bak"))
	File.Copy(currentProject.path,"project.bcp",File.Combine(currentProject.path,"bak"),"project.bcp")
End Sub

Public Sub updateSavedTime
	operationLabel.Text="Project saved at "&DateTime.Time(DateTime.Now)
End Sub

Public Sub updateOperation(info As String)
	operationLabel.Text=info
End Sub

Sub checkLV_MouseClicked (EventData As MouseEvent)
	
End Sub

Public Sub addCheckList(replacements As List, message As String,offset As Int,length As Int,context As String,entry As Int)
	Try
	
		TabPane1.SelectedIndex=2
		checkLV.Clear
		Log(offset)
		Log(context)
		Dim tf As TextFlow
		tf.Initialize
		tf.AddText("message:").SetUnderline(True)
		tf.AddText(" "&message&CRLF)
		tf.AddText("context: "&context.SubString2(0,offset))
		tf.AddText(context.SubString2(offset,offset+length)).SetColor(fx.Colors.Red)
		tf.AddText(context.SubString2(offset+length,context.Length))
		Dim p As Pane=tf.CreateTextFlow
		p.SetSize(checkLV.AsView.Width,Utils.MeasureMultilineTextHeight(fx.DefaultFont(15),checkLV.AsView.Width,tf.getText))
		checkLV.Add(p,"")
		For Each replacement As Map In replacements
			Dim values As List
			values.Initialize
			values.Add(replacement.Get("value"))
			values.Add(offset)
			values.Add(length)
			values.Add(entry)
			checkLV.AddTextItem("replacement: "&replacement.Get("value"),values)
		Next
	Catch
		Log(LastException)
End Try
End Sub

Public Sub getCheckLVSize As Int
	Return checkLV.Size
End Sub

Public Sub checkLVClear
	checkLV.Clear
End Sub

Public Sub noErrors
	checkLV.Clear
	checkLV.AddTextItem("No errors","")
End Sub

Sub checkLV_ItemClick (Index As Int, Value As Object)
	If Value<>"" Then
		Dim tagList As List
		tagList=Value
		Dim offset,length,entry As Int
		offset=tagList.Get(1)
		length=tagList.Get(2)
		entry=tagList.Get(3)
		Dim replacement As String
		replacement=tagList.Get(0)
		Dim p As Pane
		p=editorLV.GetPanel(entry)
		Dim targetTextArea As TextArea
		targetTextArea=p.GetNode(1)
		targetTextArea.Text=targetTextArea.Text.SubString2(0,offset)&replacement&targetTextArea.Text.SubString2(offset+length,targetTextArea.Text.Length)
		Sleep(0)
		targetTextArea.SetSelection(targetTextArea.Text.Length,targetTextArea.Text.Length)
		targetTextArea.RequestFocus
		checkLV.Clear
	End If
End Sub


Sub addPositionChangedEvent(divider As Object,eventName As String)
	Dim Obj As Reflector
	Obj.Target = divider
	Obj.AddChangeListener(eventName, "positionProperty")
End Sub

Sub dividerPosition_changed(old As Object, new As Object)
	CallSubDelayed(Me,"ListViewParent_Resize")
End Sub

Sub lbl_MouseClicked (EventData As MouseEvent)
	If EventData.PrimaryButtonPressed Then
		Dim lbl As Label
		lbl=Sender
		Log(lbl.Text)
		Select lbl.Text
		
			Case "Project Files"

			Case "Translation Memory"
				Dim tmm As TMManager
				tmm.Initialize
				tmm.Show
			Case "Terminology"
				Dim termm As TermManager
				termm.Initialize
				termm.show
			Case "Preview"
				If pre.IsInitialized=False Then
					pre.Initialize
				End If
				If pre.isShowing=False Then
					pre.Show
				End If
			Case "Statistics"
				Dim st As statistics
				st.Initialize
				st.Show
		End Select
	End If
End Sub


Public Sub setLabelFont(lbl As Label,name As String)
	If preferencesMap.ContainsKey(name) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(name)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		lbl.Font=fx.CreateFont(familyName,size,False,False)
	Else
		lbl.Font=fx.CreateFont("Tahoma",16,False,False)
	End If
	Log(lbl.font.Size)
End Sub

Public Sub setTextAreaFont(ta As TextArea,name As String)
	If preferencesMap.ContainsKey(name) Then
		Dim fontPreference As Map
		fontPreference=preferencesMap.Get(name)
		Dim familyName As String
		familyName=fontPreference.get("FamilyName")
		Dim size As Int
		size=fontPreference.get("Size")
		ta.Style = $"-fx-font-family: ${familyName};
		             -fx-font-size: ${size}px;"$
	End If
End Sub

Public Sub addTextAreaToSegmentPane(segmentpane As Pane,source As String)
	Log("add")
	If currentProject.IsInitialized Then
		currentProject.addTextAreaToSegmentPane(segmentpane,source,"")
	End If
End Sub

Public Sub changeAutoSaveInterval(seconds As Int)
	autosaveTimer.Interval=seconds*1000
End Sub


